<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Collections.Specialized" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#
var typeName = "SerializerRepository";
// Copied from DefaultSerializers.tt
var excludes =
	new HashSet<Type>()
	{
		// Special(manual) handlings on builtin marshaler:
		// typeof( System.Guid ),
		// typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.ArraySegment<> ),
		typeof( System.Collections.DictionaryEntry ),
		typeof( System.Collections.Generic.KeyValuePair<,> ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.DateTime ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.DateTimeOffset ),
		typeof( System.Numerics.Complex ),
		// Special handling on serializer:
		typeof( System.Nullable<> ),
		// Not supported:
		typeof( void ),
		typeof( System.IntPtr ),
		typeof( System.UIntPtr ),
		typeof( System.ModuleHandle ),
		typeof( System.RuntimeTypeHandle ),
		typeof( System.RuntimeFieldHandle ),
		typeof( System.RuntimeMethodHandle ),
		typeof( System.RuntimeArgumentHandle ),
		typeof( System.ArgIterator ),
		typeof( System.ConsoleKeyInfo ),
		typeof( System.TypedReference ),
		typeof( System.ComponentModel.Design.Serialization.MemberRelationship ),
		typeof( System.Diagnostics.CounterSample ),
		typeof( System.Diagnostics.Eventing.EventDescriptor ),
		typeof( System.Diagnostics.SymbolStore.SymbolToken ),
		typeof( System.IO.WaitForChangedResult ),
		typeof( System.Net.Sockets.IPPacketInformation ),
		typeof( System.Net.Sockets.SocketInformation ),
		typeof( System.Net.Sockets.UdpReceiveResult ),
		typeof( System.Reflection.CustomAttributeNamedArgument ),
		typeof( System.Reflection.CustomAttributeTypedArgument ),
		typeof( System.Reflection.InterfaceMapping ),
		typeof( System.Reflection.ParameterModifier ),
		typeof( System.Reflection.Emit.EventToken ),
		typeof( System.Reflection.Emit.ExceptionHandler ),
		typeof( System.Reflection.Emit.FieldToken ),
		typeof( System.Reflection.Emit.Label ),
		typeof( System.Reflection.Emit.MethodToken ),
		typeof( System.Reflection.Emit.OpCode ),
		typeof( System.Reflection.Emit.ParameterToken ),
		typeof( System.Reflection.Emit.PropertyToken ),
		typeof( System.Reflection.Emit.SignatureToken ),
		typeof( System.Reflection.Emit.StringToken ),
		typeof( System.Reflection.Emit.TypeToken ),
		typeof( System.Runtime.CompilerServices.AsyncTaskMethodBuilder ),
		typeof( System.Runtime.CompilerServices.AsyncTaskMethodBuilder<> ),
		typeof( System.Runtime.CompilerServices.AsyncVoidMethodBuilder ),
		typeof( System.Runtime.CompilerServices.ConfiguredTaskAwaitable ),
		typeof( System.Runtime.CompilerServices.ConfiguredTaskAwaitable<> ),
		typeof( System.Runtime.CompilerServices.TaskAwaiter ),
		typeof( System.Runtime.CompilerServices.TaskAwaiter<> ),
		typeof( System.Runtime.CompilerServices.YieldAwaitable ),
		typeof( System.Runtime.InteropServices.ArrayWithOffset ),
		typeof( System.Runtime.InteropServices.GCHandle ),
		typeof( System.Runtime.InteropServices.HandleRef ),
		typeof( System.Runtime.InteropServices.ComTypes.BIND_OPTS ),
		typeof( System.Runtime.InteropServices.ComTypes.BINDPTR ),
		typeof( System.Runtime.InteropServices.ComTypes.CONNECTDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.DISPPARAMS ),
		typeof( System.Runtime.InteropServices.ComTypes.ELEMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.EXCEPINFO ),
		typeof( System.Runtime.InteropServices.ComTypes.FORMATETC ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
		typeof( System.Runtime.InteropServices.ComTypes.FUNCDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.IDLDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.PARAMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.STATDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.STATSTG ),
		typeof( System.Runtime.InteropServices.ComTypes.STGMEDIUM ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPELIBATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.VARDESC ),
		typeof( System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken ),
		typeof( System.Runtime.Serialization.SerializationEntry ),
		typeof( System.Runtime.Serialization.StreamingContext ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.DSAParameters ),
		typeof( System.Security.Cryptography.RSAParameters ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.X509Certificates.X509ChainStatus ),
		typeof( System.Threading.AsyncFlowControl ),
		typeof( System.Threading.CancellationToken ),
		typeof( System.Threading.CancellationTokenRegistration ),
		typeof( System.Threading.LockCookie ),
		typeof( System.Threading.NativeOverlapped ),
		typeof( System.Threading.SpinLock ),
		typeof( System.Threading.SpinWait ),
		typeof( System.Threading.Tasks.ParallelLoopResult ),
		// .NET 4.6 Types -- comment out when you face T4Template problems
		typeof( System.Diagnostics.Tracing.EventSourceOptions ),
		typeof( System.Threading.AsyncLocalValueChangedArgs<> ),
	};
var structTypes = 
	typeof( object ).Assembly.GetTypes()
	.Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	.Concat(
		typeof( TraceListener ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( Enumerable ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( BigInteger ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Except( excludes )
	.ToArray();
var classTypes =
	new[]
	{
		typeof( ArraySegment<> ),
		typeof( System.Globalization.CultureInfo ),
		typeof( DictionaryEntry ),
		typeof( System.Collections.Stack ),
		typeof( System.Collections.Queue ),
		typeof( KeyValuePair<,> ),
		typeof( Stack<> ),
		typeof( Queue<> ),
		typeof( Complex ),
		typeof( Uri ),
		typeof( Version ),		
		typeof( NameValueCollection ),		
	};
var tuples =
	typeof( Tuple<> ).Assembly
	.GetTypes()
	.Where( type => type.IsGenericType && type.Namespace == typeof( Tuple<> ).Namespace && type.Name == "Tuple" )
	.ToArray();
var notInNet45s =
	new HashSet<Type>()
	{
		typeof( System.Numerics.Vector2 ),
		typeof( System.Numerics.Vector3 ),
		typeof( System.Numerics.Vector4 ),
		typeof( System.Numerics.Matrix3x2 ),
		typeof( System.Numerics.Matrix4x4 ),
		typeof( System.Numerics.Plane ),
		typeof( System.Numerics.Quaternion ),
		typeof( System.Security.Cryptography.HashAlgorithmName ),
	};
var notInNetStandard1_3 = // Not in UWP and Xamarin, so effectively not in netstd 1.3...
	new HashSet<Type>()
	{
		typeof( System.Numerics.Vector2 ),
		typeof( System.Numerics.Vector3 ),
		typeof( System.Numerics.Vector4 ),
		typeof( System.Numerics.Matrix3x2 ),
		typeof( System.Numerics.Matrix4x4 ),
		typeof( System.Numerics.Plane ),
		typeof( System.Numerics.Quaternion ),
		typeof( System.Security.Cryptography.HashAlgorithmName ),
	};
var notInNet35s =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
		typeof( System.Numerics.Complex ),
	};
var notInWP8SLs =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
		typeof( System.Numerics.Complex ),
	};
var notInSLs =
	new HashSet<Type>()
	{
		typeof( System.Collections.Stack ),
		typeof( System.Collections.Queue ),
		typeof( System.Collections.Specialized.BitVector32 ),
		typeof( System.Collections.Specialized.NameValueCollection ),
		typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
	};
var notInNetStandard1_1 =
	new HashSet<Type>()
	{
		typeof( System.Collections.Stack ),
		typeof( System.Collections.Queue ),
		typeof( System.Collections.Specialized.BitVector32 ),
		typeof( System.Collections.Specialized.NameValueCollection ),
		typeof( System.Security.Cryptography.HashAlgorithmName ),
	};
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.Collections;
using System.Collections.Generic;
#if !UNITY || MSGPACK_UNITY_FULL
using System.Collections.Specialized;
#endif // !UNITY || MSGPACK_UNITY_FULL
using System.Globalization;
#if !WINDOWS_PHONE && !NET35 && !UNITY
using System.Numerics;
#endif // !WINDOWS_PHONE && !NET35 && !UNITY
using System.Reflection;
using System.Text;

using MsgPack.Serialization.DefaultSerializers;

namespace MsgPack.Serialization
{
	// This file generated from <#= typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= typeName #>.tt instead.

	// ReSharper disable RedundantNameQualifier
	partial class <#= typeName #> 
	{
		internal const int DefaultTableCapacity = <#= structTypes.Where( t => !t.IsEnum ).Count() + classTypes.Length + 19 #>;

		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Maintainability", "CA1506:AvoidExcessiveClassCoupling", Justification = "This API is naturally coupled with many types" )]
		internal static Dictionary<RuntimeTypeHandle, object> InitializeDefaultTable( SerializationContext ownerContext )
		{
			var dictionary = new Dictionary<RuntimeTypeHandle, object>( DefaultTableCapacity );
			dictionary.Add( typeof( MessagePackObject ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.MsgPack_MessagePackObjectMessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( MessagePackObjectDictionary ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.MsgPack_MessagePackObjectDictionaryMessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( MessagePackExtendedTypeObject ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.MsgPack_MessagePackExtendedTypeObjectMessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( List<MessagePackObject> ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.System_Collections_Generic_ListOfMessagePackObjectMessagePackSerializer( ownerContext ) );
#if !UNITY
			dictionary.Add( typeof( Object ).TypeHandle, new MsgPack.Serialization.Polymorphic.PolymorphicSerializerProvider<object>( new MsgPack.Serialization.DefaultSerializers.System_ObjectMessagePackSerializer( ownerContext ) ) );
#else
			dictionary.Add( typeof( Object ).TypeHandle, new MsgPack.Serialization.Polymorphic.PolymorphicSerializerProvider<object>( ownerContext, new MsgPack.Serialization.DefaultSerializers.System_ObjectMessagePackSerializer( ownerContext ) ) );
#endif // !UNITY
			dictionary.Add( typeof( String ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( String ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( StringBuilder ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( StringBuilder ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( Char[] ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( Char ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>ArrayMessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( Byte[] ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= typeof( Byte ).FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>ArrayMessagePackSerializer( ownerContext ) );
			dictionary.Add( typeof( DateTime ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.DateTimeMessagePackSerializerProvider( ownerContext, false ) );
			dictionary.Add( typeof( DateTimeOffset ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.DateTimeOffsetMessagePackSerializerProvider( ownerContext, false ) );
#if ( !SILVERLIGHT || WINDOWS_PHONE ) && !XAMARIN && !UNITY && !UNITY
			dictionary.Add( typeof( System.Runtime.InteropServices.ComTypes.FILETIME ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.FileTimeMessagePackSerializerProvider( ownerContext, false ) );
#endif // ( !SILVERLIGHT || WINDOWS_PHONE ) && !XAMARIN && !UNITY && !UNITY
			// DateTime, DateTimeOffset, and FILETIME must have nullable providers.
			dictionary.Add( typeof( DateTime? ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.DateTimeMessagePackSerializerProvider( ownerContext, true ) );
			dictionary.Add( typeof( DateTimeOffset? ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.DateTimeOffsetMessagePackSerializerProvider( ownerContext, true ) );
#if ( !SILVERLIGHT || WINDOWS_PHONE ) && !XAMARIN && !UNITY && !UNITY
			dictionary.Add( typeof( System.Runtime.InteropServices.ComTypes.FILETIME? ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.FileTimeMessagePackSerializerProvider( ownerContext, true ) );
#endif // ( !SILVERLIGHT || WINDOWS_PHONE ) && !XAMARIN && !UNITY && !UNITY
#if !NETFX_CORE && !NETSTANDARD1_1
			dictionary.Add( typeof( DBNull ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.System_DBNullMessagePackSerializer( ownerContext ) );
#endif // !NETFX_CORE && !NETSTANDARD1_1
<#
foreach( Type type in structTypes )
{
	if( type.IsEnum )
	{
		continue;
	}
	
	if( notInNetStandard1_1.Contains( type ) )
	{
#>
#if !NETSTANDARD1_1
<#
	}

	if( notInSLs.Contains( type ) )
	{
#>
#if !SILVERLIGHT
<#
	}

	if( notInNet45s.Contains( type ) )
	{
#>
#if !NET35 && !UNITY && !NET40 && !NET45 && !SILVERLIGHT
<#
	}

	if( notInNetStandard1_3.Contains( type ) )
	{
#>
#if !NETSTANDARD1_1 && !NETSTANDARD1_3 && !XAMARIN
<#
	}

	if( notInWP8SLs.Contains( type ) )
	{
#>
#if !WINDOWS_PHONE
<#
	}

	if( notInNet35s.Contains( type ) )
	{
#>
#if !NET35 && !UNITY
<#
	}

	if ( type.Assembly.FullName != typeof( object ).Assembly.FullName )
	{
#>
#if !UNITY || MSGPACK_UNITY_FULL
<#
	}
#>
			dictionary.Add( typeof( <#= type.FullName #> ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( ownerContext ) );
<#

	if ( type.Assembly.FullName != typeof( object ).Assembly.FullName )
	{
#>
#endif // !UNITY || MSGPACK_UNITY_FULL
<#
	}

	if( notInNet35s.Contains( type ) )
	{
#>
#endif // !NET35 && !UNITY
<#
	}

	if( notInWP8SLs.Contains( type ) )
	{
#>
#endif // !WINDOWS_PHONE
<#
	}

	if( notInNetStandard1_3.Contains( type ) )
	{
#>
#endif // !NETSTANDARD1_1 && !NETSTANDARD1_3 && !XAMARIN
<#
	}

	if( notInNet45s.Contains( type ) )
	{
#>
#endif // !NET35 && !UNITY && !NET40 && !NET45 && !SILVERLIGHT
<#
	}

	if( notInSLs.Contains( type ) )
	{#>
#endif // !SILVERLIGHT
<#
	}

	if( notInNetStandard1_1.Contains( type ) )
	{
#>
#endif // !NETSTANDARD1_1
<#
	}
}

foreach( Type type in classTypes )
{
	if( notInNetStandard1_1.Contains( type ) )
	{
#>
#if !NETSTANDARD1_1
<#
	}

	if( notInSLs.Contains( type ) )
	{
#>
#if !SILVERLIGHT
<#
	}

	if( notInNet45s.Contains( type ) )
	{
#>
#if !NET40 && !NET45
<#
	}

	if( notInWP8SLs.Contains( type ) )
	{
#>
#if !WINDOWS_PHONE
<#
	}

	if( notInNet35s.Contains( type ) )
	{
#>
#if !NET35 && !UNITY
<#
	}

	if ( type.Assembly.FullName != typeof( object ).Assembly.FullName )
	{
#>
#if !UNITY || MSGPACK_UNITY_FULL
<#
	}
	
	if( type.IsGenericTypeDefinition )
	{
#>
			dictionary.Add( typeof( <#= ToCSharpTypeToken( type ) #> ).TypeHandle, typeof( <#= type.FullName.Replace( '`', '_' ).Replace( Type.Delimiter, '_' ) #>MessagePackSerializer<#= GetCSharpTypeArguments( type ) #> ) );
<#
	}
	else
	{
#>
			dictionary.Add( typeof( <#= ToCSharpTypeToken( type ) #> ).TypeHandle, new MsgPack.Serialization.DefaultSerializers.<#= type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) #>MessagePackSerializer( ownerContext ) );
<#
	}
	
	if ( type.Assembly.FullName != typeof( object ).Assembly.FullName )
	{
#>
#endif // !UNITY || MSGPACK_UNITY_FULL
<#
	}

	if( notInNet35s.Contains( type ) )
	{
#>
#endif // !NET35 && !UNITY
<#
	}

	if( notInWP8SLs.Contains( type ) )
	{
#>
#endif // !WINDOWS_PHONE
<#
	}

	if( notInNet45s.Contains( type ) )
	{
#>
#endif // !NET40 && !NET45
<#
	}

	if( notInSLs.Contains( type ) )
	{
#>
#endif // !SILVERLIGHT
<#
	}

	if( notInNetStandard1_1.Contains( type ) )
	{
#>
#endif // !NETSTANDARD1_1
<#
	}
}
#>
			return dictionary;
		}
	}
}
<#+
private static string ToCSharpTypeToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	return type.Namespace + Type.Delimiter + type.Name.Remove( type.Name.IndexOf( '`' ) ) + "<" + String.Join( string.Empty, Enumerable.Repeat( ',', type.GetGenericArguments().Length - 1 ) ) + ">";
}

private static string GetCSharpTypeArguments( Type type )
{
	var buffer = new StringBuilder();
	BuildCSharpGenericArgumentsToken( type, buffer, false );
	return buffer.ToString();
}

private static void BuildCSharpGenericArgumentsToken( Type type, StringBuilder buffer, bool containsGenericArguments )
{
	if( !type.IsGenericType)
	{
		return;
	}
	
	buffer.Append('<');
	
	bool isFirst = true;
	foreach( Type genericParameter in type.GetGenericArguments () )
	{	
		if( isFirst )
		{
			isFirst = false;
		}
		else
		{
			buffer.Append( ',' ).Append( ' ' );
		}
		
		if( containsGenericArguments )
		{
			if( genericParameter.IsGenericParameter )
			{
				buffer.Append( genericParameter.Name );
			}
			else
			{
				buffer.Append( genericParameter.FullName );
			}
		}
	}
	
	buffer.Append( '>' );
}

private static string ToCSharpToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	StringBuilder buffer = new StringBuilder( type.FullName.Remove( type.FullName.IndexOf( '`' ) ) );
	BuildCSharpGenericArgumentsToken( type, buffer, false );
	
	return buffer.ToString();
}
#>