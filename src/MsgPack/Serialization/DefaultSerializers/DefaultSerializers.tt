<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System" #>
<#@ assembly Name="System.Core" #>
<#@ assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Numerics" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#
var excludes =
	new HashSet<Type>()
	{
		// Special(manual) handlings on builtin marshaler:
		typeof( System.Runtime.InteropServices.ComTypes.FILETIME ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.ArraySegment<> ),
		typeof( System.Collections.DictionaryEntry ),
		typeof( System.Collections.Generic.KeyValuePair<,> ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.DateTime ),
		// Special(manual) handlings on builtin serializer:
		typeof( System.DateTimeOffset ),
		typeof( System.Numerics.Complex ),
		typeof( System.Numerics.Vector2 ),
		typeof( System.Numerics.Vector3 ),
		typeof( System.Numerics.Vector4 ),
		typeof( System.Numerics.Matrix3x2 ),
		typeof( System.Numerics.Matrix4x4 ),
		typeof( System.Numerics.Plane ),
		typeof( System.Numerics.Quaternion ),
		// Special handling on serializer:
		typeof( System.Nullable<> ),
		// Not supported:
		typeof( void ),
		typeof( System.IntPtr ),
		typeof( System.UIntPtr ),
		typeof( System.ModuleHandle ),
		typeof( System.RuntimeTypeHandle ),
		typeof( System.RuntimeFieldHandle ),
		typeof( System.RuntimeMethodHandle ),
		typeof( System.RuntimeArgumentHandle ),
		typeof( System.ArgIterator ),
		typeof( System.ConsoleKeyInfo ),
		typeof( System.TypedReference ),
		typeof( System.ComponentModel.Design.Serialization.MemberRelationship ),
		typeof( System.Diagnostics.CounterSample ),
		typeof( System.Diagnostics.Eventing.EventDescriptor ),
		typeof( System.Diagnostics.SymbolStore.SymbolToken ),
		typeof( System.Diagnostics.Tracing.EventSourceOptions ),
		typeof( System.IO.WaitForChangedResult ),
		typeof( System.Net.Sockets.IPPacketInformation ),
		typeof( System.Net.Sockets.SocketInformation ),
		typeof( System.Net.Sockets.UdpReceiveResult ),
		typeof( System.Reflection.CustomAttributeNamedArgument ),
		typeof( System.Reflection.CustomAttributeTypedArgument ),
		typeof( System.Reflection.InterfaceMapping ),
		typeof( System.Reflection.ParameterModifier ),
		typeof( System.Reflection.Emit.EventToken ),
		typeof( System.Reflection.Emit.ExceptionHandler ),
		typeof( System.Reflection.Emit.FieldToken ),
		typeof( System.Reflection.Emit.Label ),
		typeof( System.Reflection.Emit.MethodToken ),
		typeof( System.Reflection.Emit.OpCode ),
		typeof( System.Reflection.Emit.ParameterToken ),
		typeof( System.Reflection.Emit.PropertyToken ),
		typeof( System.Reflection.Emit.SignatureToken ),
		typeof( System.Reflection.Emit.StringToken ),
		typeof( System.Reflection.Emit.TypeToken ),
		typeof( System.Runtime.CompilerServices.AsyncTaskMethodBuilder ),
		typeof( System.Runtime.CompilerServices.AsyncTaskMethodBuilder<> ),
		typeof( System.Runtime.CompilerServices.AsyncVoidMethodBuilder ),
		typeof( System.Runtime.CompilerServices.ConfiguredTaskAwaitable ),
		typeof( System.Runtime.CompilerServices.ConfiguredTaskAwaitable<> ),
		typeof( System.Runtime.CompilerServices.TaskAwaiter ),
		typeof( System.Runtime.CompilerServices.TaskAwaiter<> ),
		typeof( System.Runtime.CompilerServices.YieldAwaitable ),
		typeof( System.Runtime.InteropServices.ArrayWithOffset ),
		typeof( System.Runtime.InteropServices.GCHandle ),
		typeof( System.Runtime.InteropServices.HandleRef ),
		typeof( System.Runtime.InteropServices.ComTypes.BIND_OPTS ),
		typeof( System.Runtime.InteropServices.ComTypes.BINDPTR ),
		typeof( System.Runtime.InteropServices.ComTypes.CONNECTDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.DISPPARAMS ),
		typeof( System.Runtime.InteropServices.ComTypes.ELEMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.EXCEPINFO ),
		typeof( System.Runtime.InteropServices.ComTypes.FORMATETC ),
		typeof( System.Runtime.InteropServices.ComTypes.FUNCDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.IDLDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.PARAMDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.STATDATA ),
		typeof( System.Runtime.InteropServices.ComTypes.STATSTG ),
		typeof( System.Runtime.InteropServices.ComTypes.STGMEDIUM ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPEDESC ),
		typeof( System.Runtime.InteropServices.ComTypes.TYPELIBATTR ),
		typeof( System.Runtime.InteropServices.ComTypes.VARDESC ),
		typeof( System.Runtime.InteropServices.WindowsRuntime.EventRegistrationToken ),
		typeof( System.Runtime.Serialization.SerializationEntry ),
		typeof( System.Runtime.Serialization.StreamingContext ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.DSAParameters ),
		typeof( System.Security.Cryptography.RSAParameters ),
		typeof( System.Security.Cryptography.CngProperty ),
		typeof( System.Security.Cryptography.X509Certificates.X509ChainStatus ),
		typeof( System.Security.Cryptography.HashAlgorithmName ),
		typeof( System.Threading.AsyncFlowControl ),
		typeof( System.Threading.AsyncLocalValueChangedArgs<> ),
		typeof( System.Threading.CancellationToken ),
		typeof( System.Threading.CancellationTokenRegistration ),
		typeof( System.Threading.LockCookie ),
		typeof( System.Threading.NativeOverlapped ),
		typeof( System.Threading.SpinLock ),
		typeof( System.Threading.SpinWait ),
		typeof( System.Threading.Tasks.ParallelLoopResult ),
	};
	
var types = 
	typeof( object ).Assembly.GetTypes()
	.Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	.Concat(
		typeof( TraceListener ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( Enumerable ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Concat(
		typeof( BigInteger ).Assembly.GetTypes().Where( type => type.IsValueType && type.IsPublic && !Attribute.IsDefined( type, typeof( ObsoleteAttribute ) ) )
	).Except( excludes )
	.ToArray();
	
var workArounds =
	new Dictionary<Type, WorkAround>()
	{
		{ typeof( char ), new WorkAround(){ PackCode = "packer.Pack( ( System.UInt16 )value );", UnpackCode = "return ( System.Char ) unpacker.LastReadData.AsUInt16(); " } },
		{ typeof( decimal ), new WorkAround(){ PackCode = "packer.PackString( value.ToString( \"G\", CultureInfo.InvariantCulture ) );", UnpackCode = "return System.Decimal.Parse( unpacker.LastReadData.AsString(), CultureInfo.InvariantCulture ); " } },
		{ typeof( Guid ), new WorkAround(){ PackCode = "packer.PackRaw( value.ToByteArray() );", UnpackCode = "return new System.Guid( unpacker.LastReadData.AsBinary() ); " } },
		{ typeof( BigInteger ), new WorkAround(){ PackCode = "packer.PackRaw( value.ToByteArray() );", UnpackCode = "return new System.Numerics.BigInteger( unpacker.LastReadData.AsBinary() ); " } },
	};

var asyncWorkArounds =
	new Dictionary<Type, string>()
	{
		{ typeof( char ), "packer.PackAsync( ( System.UInt16 )value, cancellationToken ).ConfigureAwait( false );" },
		{ typeof( decimal ), "packer.PackStringAsync( value.ToString( \"G\", CultureInfo.InvariantCulture ), cancellationToken ).ConfigureAwait( false );" },
		{ typeof( Guid ), "packer.PackRawAsync( value.ToByteArray(), cancellationToken ).ConfigureAwait( false );" },
		{ typeof( BigInteger ), "packer.PackRawAsync( value.ToByteArray(), cancellationToken ).ConfigureAwait( false );" },
	};

var notInSLs =
	new HashSet<Type>()
	{
		typeof( System.Collections.Specialized.BitVector32 ),
	};

var notInWP8SLs =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
	};

var notInNetStandard1_1 =
	new HashSet<Type>()
	{
		typeof( System.Collections.Specialized.BitVector32 ),
	};

var notInNetFX35 =
	new HashSet<Type>()
	{
		typeof( System.Numerics.BigInteger ),
	};

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

#if UNITY_5 || UNITY_STANDALONE || UNITY_WEBPLAYER || UNITY_WII || UNITY_IPHONE || UNITY_ANDROID || UNITY_PS3 || UNITY_XBOX360 || UNITY_FLASH || UNITY_BKACKBERRY || UNITY_WINRT
#define UNITY
#endif

using System;
using System.Globalization;
using System.Runtime.Serialization;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

namespace MsgPack.Serialization.DefaultSerializers
{
	// This file generated from DefaultSerializers.tt T4Template.
	// Do not modify this file. Edit DefaultSerializers.tt instead.

	// ReSharper disable InconsistentNaming
	// ReSharper disable RedundantNameQualifier
	// ReSharper disable RedundantCast
<#
foreach( Type type in types )
{
	if( type.IsEnum )
	{
		continue;
	}
#>

<#
	if( type.IsGenericTypeDefinition && !workArounds.ContainsKey( type ) )
	{
#>
#error <#= type #> cannot be generated
<#
		continue;
	}
	
	var ctors = type.GetConstructors( BindingFlags.Public | BindingFlags.Instance ).Where( item => item.GetParameters().Length == 1 ).Where( item => IsMessagePackPrimitive( item.GetParameters()[ 0 ].ParameterType ) ).ToArray();
	
	if ( notInSLs.Contains( type ) )
	{
#>
#if !SILVERLIGHT
<#
	}
	
	if ( notInNetStandard1_1.Contains( type ) )
	{
#>
#if !NETSTANDARD1_1
<#
	}

	if ( notInWP8SLs.Contains( type ) )
	{
#>
#if !WINDOWS_PHONE
<#
	}

	if ( notInNetFX35.Contains( type ) )
	{
#>
#if !NET35 && !UNITY
<#
	}

	var typeName = type.FullName.Replace( Type.Delimiter, '_' ).Replace( '`', '_' ) + "MessagePackSerializer";

	if ( type.Assembly.FullName != typeof( object ).Assembly.FullName )
	{
#>
#if !UNITY || MSGPACK_UNITY_FULL
<#
	}
#>
	internal sealed class <#= typeName #> : MessagePackSerializer< <#= ToCSharpToken( type ) #> >
	{
		public <#= typeName #>( SerializationContext ownerContext )
			: base( ownerContext, SerializerCapabilities.PackTo | SerializerCapabilities.UnpackFrom ) { }

		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Validated by caller in base class" )]
		protected internal override void PackToCore( Packer packer, <#= type.FullName #> value )
		{
<#
	if ( workArounds.ContainsKey( type ) )
	{
#>
			<#= workArounds[ type ].PackCode #>
<#
	}
	else if ( type.IsPrimitive )
	{
#>
			packer.Pack( value );
<#
	}
	else if ( ctors.Length != 1 )
	{
#>
#error <#= type.FullName #> has <#= ctors.Length #> parameter constructors
			/*
<#
foreach( var ctor in ctors )
{
#>
			 * <#= ctor #>
<#
}
#>
			 */
<#
	}
	else if ( IsMessagePackPrimitive( ctors[ 0 ].GetParameters()[ 0 ].ParameterType ) )
	{
#>
			packer.Pack( value.<#= Pascalize( ctors[ 0 ].GetParameters()[ 0 ].Name ) #> );
<#
	}
	else
	{
#>
#error ParameterType '<#= ctors[ 0 ].GetParameters()[ 0 ].ParameterType #>' is not primitive.
<#
	}
#>
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Validated by caller in base class" )]
		protected internal override <#= type.FullName #> UnpackFromCore( Unpacker unpacker )
		{
<#
	if ( workArounds.ContainsKey( type ) )
	{
#>
			try
			{
				<#= workArounds[ type ].UnpackCode #>
			}
			catch( ArgumentException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not expected type. {0}", ex.Message ), ex );
			}
			catch( InvalidOperationException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not expected type. {0}", ex.Message ), ex );
			}
<#
	}
	else if ( type.IsPrimitive )
	{
#>
			try
			{
				return unpacker.LastReadData.As<#= type.Name #>();
			}
			catch( InvalidOperationException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not '{0}' type. {1}", typeof( <#= type #> ), ex.Message ) );
			}
<#
	}
	else if ( ctors.Length != 1 )
	{
#>
#error <#= type.FullName #> has <#= ctors.Length #> parameter constructors
			/*
<#
foreach( var ctor in ctors )
{
#>
			 * <#= ctor #>
<#
}
#>
			 */
<#
	}
	else if ( IsMessagePackPrimitive( ctors[ 0 ].GetParameters()[ 0 ].ParameterType ) )
	{
		var ctorParameterType = ctors[ 0 ].GetParameters()[ 0 ].ParameterType;
#>
			<#= ctorParameterType #> ctorArgument;
			try
			{
				ctorArgument = unpacker.LastReadData.As<#= ctorParameterType.Name #>();
			}
			catch( InvalidOperationException ex )
			{
				throw new SerializationException( String.Format( CultureInfo.CurrentCulture, "The unpacked value is not '{0}' type. {1}", typeof( <#= ctorParameterType #> ), ex.Message ) );
			}

			return new <#= type.FullName #>( ctorArgument );
<#
	}
	else
	{
#>
#error ParameterType '<#= ctors[ 0 ].GetParameters()[ 0 ].ParameterType #>' is not primitive.
<#
	}
#>
		}

#if FEATURE_TAP

		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Validated by caller in base class" )]
		protected internal override async Task PackToAsyncCore( Packer packer, <#= type.FullName #> value, CancellationToken cancellationToken )
		{
<#
	if ( asyncWorkArounds.ContainsKey( type ) )
	{
#>
			await <#= asyncWorkArounds[ type ] #>
<#
	}
	else if ( type.IsPrimitive )
	{
#>
			await packer.PackAsync( value, cancellationToken ).ConfigureAwait( false );
<#
	}
	else if ( ctors.Length != 1 )
	{
#>
#error <#= type.FullName #> has <#= ctors.Length #> parameter constructors
			/*
<#
foreach( var ctor in ctors )
{
#>
			 * <#= ctor #>
<#
}
#>
			 */
<#
	}
	else if ( IsMessagePackPrimitive( ctors[ 0 ].GetParameters()[ 0 ].ParameterType ) )
	{
#>
			await packer.PackAsync( value.<#= Pascalize( ctors[ 0 ].GetParameters()[ 0 ].Name ) #>, cancellationToken ).ConfigureAwait( false );
<#
	}
	else
	{
#>
#error ParameterType '<#= ctors[ 0 ].GetParameters()[ 0 ].ParameterType #>' is not primitive.
<#
	}
#>
		}

		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1062:ValidateArgumentsOfPublicMethods", MessageId = "0", Justification = "Validated by caller in base class" )]
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Design", "CA1031:DoNotCatchGeneralExceptionTypes", Justification = "Transfers all catched exceptions." )]
		protected internal override Task<#= "<" + type.FullName + ">" #> UnpackFromAsyncCore( Unpacker unpacker, CancellationToken cancellationToken )
		{
<#
	if ( workArounds.ContainsKey( type ) 
		|| type.IsPrimitive
		|| ( ctors.Length == 1 && IsMessagePackPrimitive( ctors[ 0 ].GetParameters()[ 0 ].ParameterType ) )
	)
	{
#>
			var tcs = new TaskCompletionSource<#= "<" + type.FullName + ">" #>();
			try
			{
				tcs.SetResult( this.UnpackFromCore( unpacker ) );
			}
			catch( Exception ex )
			{
				tcs.SetException( ex );
			}

			return tcs.Task;
<#
	}
	else if ( ctors.Length != 1 )
	{
#>
#error <#= type.FullName #> has <#= ctors.Length #> parameter constructors
			/*
<#
foreach( var ctor in ctors )
{
#>
			 * <#= ctor #>
<#
}
#>
			 */
<#
	}
	else
	{
#>
#error ParameterType '<#= ctors[ 0 ].GetParameters()[ 0 ].ParameterType #>' is not primitive.
<#
	}
#>
		}

#endif // FEATURE_TAP

	}
<#
	if ( notInNetFX35.Contains( type ) )
	{
#>
#endif // !NET35 && !UNITY
<#
	}

	if ( notInWP8SLs.Contains( type ) )
	{
#>
#endif // !WINDOWS_PHONE
<#
	}

	if ( notInNetStandard1_1.Contains( type ) )
	{
#>
#endif // !NETSTANDARD1_1
<#
	}

	if ( notInSLs.Contains( type ) )
	{
#>
#endif // !SILVERLIGHT
<#
	}

	if ( type.Assembly.FullName != typeof( object ).Assembly.FullName )
	{
#>
#endif // !UNITY || MSGPACK_UNITY_FULL
<#
	}
}
#>
	// ReSharper restore RedundantCast
	// ReSharper restore RedundantNameQualifier
	// ReSharper restore InconsistentNaming
}
<#+
private static string Pascalize( string value )
{
	if( String.IsNullOrEmpty( value ) )
	{
		return value;
	}
	
	return Char.ToUpperInvariant( value[ 0 ] ) + value.Substring( 1 );
}

private static void BuildCSharpGenericArgumentsToken( Type type, StringBuilder buffer )
{
	if( !type.IsGenericType)
	{
		return;
	}
	
	buffer.Append('<');
	
	bool isFirst = true;
	foreach( Type genericParameter in type.GetGenericArguments () )
	{	
		if( isFirst )
		{
			isFirst = false;
		}
		else
		{
			buffer.Append( ',' ).Append( ' ' );
		}
		
		if( genericParameter.IsGenericParameter )
		{
			buffer.Append( genericParameter.Name );
		}
		else
		{
			buffer.Append( genericParameter.FullName );
		}	
	}
	
	buffer.Append( '>' );}

private static string ToCSharpToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	StringBuilder buffer = new StringBuilder( type.FullName.Remove( type.FullName.IndexOf( '`' ) ) );

	BuildCSharpGenericArgumentsToken( type, buffer );
	
	return buffer.ToString();
}

private static bool IsMessagePackPrimitive( Type type )
{
	switch( Type.GetTypeCode( type ) )
	{
		case TypeCode.Char:
		case TypeCode.DateTime:
		case TypeCode.DBNull:
		case TypeCode.Decimal:
		case TypeCode.Empty:
		case TypeCode.Object:
		{
			return false;
		}
		default:
		{
			return true;
		}
	}
}

private struct WorkAround
{
	public string PackCode;
	public string UnpackCode;
}
#>