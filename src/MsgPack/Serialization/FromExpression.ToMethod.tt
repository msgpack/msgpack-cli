<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Linq.Expressions" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#
var __typeName = "FromExpression";
var __actions =  GetDelegates( typeof( object ).Assembly, "Action" ).Concat( GetDelegates( typeof( Enumerable ).Assembly, "Action" ) ).ToArray();
var __funcs =  GetDelegates( typeof( object ).Assembly, "Func" ).Concat( GetDelegates( typeof( Enumerable ).Assembly, "Func" ) ).ToArray();
var __maxWindowsPhoneArity = 5;	
	
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Globalization;
using System.Linq.Expressions;
using System.Reflection;

namespace MsgPack.Serialization
{
	// This file generated from <#= __typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.tt instead.

	partial class <#= __typeName #> 
	{
<#
foreach( Type __action in __actions )
{
	var __notAvailableOnWP = __action.GetGenericArguments().Length >= __maxWindowsPhoneArity;

	if ( __notAvailableOnWP )
	{
#>
#if !WINDOWS_PHONE && !NET35
<#
	}
#>
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode" )]
		public static MethodInfo ToMethod<#= GetCSharpGenericArgumentsToken( __action ) #>( Expression< <#= ToCSharpToken( __action ) #> > source )
		{
			return ToMethodCore( source );
		}
<#
	if ( __notAvailableOnWP )
	{
#>
#endif
<#
	}
}
#>

<#
foreach( Type __func in __funcs )
{
	var __notAvailableOnWP = __func.GetGenericArguments().Length > __maxWindowsPhoneArity;

	if ( __notAvailableOnWP )
	{
#>
#if !WINDOWS_PHONE && !NET35
<#
	}
#>
		[System.Diagnostics.CodeAnalysis.SuppressMessage( "Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode" )]
		public static MethodInfo ToMethod<#= GetCSharpGenericArgumentsToken( __func ) #>( Expression< <#= ToCSharpToken( __func ) #> > source )
		{
			return ToMethodCore( source );
		}
<#
	if ( __notAvailableOnWP )
	{
#>
#endif
<#
	}
}
#>
	}
}

<#+
private static IEnumerable<Type> GetDelegates( Assembly assembly, string name )
{
	var genericName = name + "`";
	return assembly.GetTypes().Where( t => t.Namespace == "System" ).Where( t => typeof( MulticastDelegate ).IsAssignableFrom( t ) ).Where( t => t.Name == name || t.Name.StartsWith( genericName, StringComparison.Ordinal ) );
}

private static string GetCSharpGenericArgumentsToken( Type type )
{
	var buffer = new StringBuilder();
	BuildCSharpGenericArgumentsToken( type, buffer );
	return buffer.ToString();
}

private static void BuildCSharpGenericArgumentsToken( Type type, StringBuilder buffer )
{
	if( !type.IsGenericType)
	{
		return;
	}
	
	buffer.Append('<');
	
	bool isFirst = true;
	foreach( Type genericParameter in type.GetGenericArguments () )
	{	
		if( isFirst )
		{
			isFirst = false;
		}
		else
		{
			buffer.Append( ',' ).Append( ' ' );
		}
		
		if( genericParameter.IsGenericParameter )
		{
			buffer.Append( genericParameter.Name );
		}
		else
		{
			buffer.Append( genericParameter.FullName );
		}	
	}
	
	buffer.Append( '>' );}

private static string ToCSharpToken( Type type )
{
	if( !type.IsGenericType )
	{
		return type.FullName;
	}
	
	StringBuilder buffer = new StringBuilder( type.FullName.Remove( type.FullName.IndexOf( '`' ) ) );

	BuildCSharpGenericArgumentsToken( type, buffer );
	
	return buffer.ToString();
}
#>