<#
//
// MessagePack for CLI
//
// Copyright (C) 2010-2012 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#>
<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Globalization" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Runtime.InteropServices" #>
<#@ import namespace="System.Text" #>
<#
// This file defines Tuple<...> for compatibility.
var __typeName = "Tuple";
var __arities = new []{ 2, 4, 5 };
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2013 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Text;

namespace System
{
	// This file generated from <#= __typeName #>.tt T4Template.
	// Do not modify this file. Edit <#= __typeName #>.tt instead.

#if DEBUG
	internal static class Tuple
	{
<#
foreach( int __arity in __arities )
{
	var __tupleTypeName = __typeName + "<" + String.Join( ", ", Enumerable.Range( 1, __arity ).Select( num => "T" + num ) ) + ">";
#>

		public static <#= __tupleTypeName #> Create<#= "<" + String.Join( ", ", Enumerable.Range( 1, __arity ).Select( num => "T" + num ) ) + ">" #>( <#= String.Join( ", ", Enumerable.Range( 1, __arity ).Select( i => String.Format( CultureInfo.InvariantCulture, "T{0} item{0}", i ) ) ) #> )
		{
			return new <#= __tupleTypeName #>( <#= String.Join( ", ", Enumerable.Range( 1, __arity ).Select( i => String.Format( CultureInfo.InvariantCulture, "item{0}", i ) ) ) #> );
		}
<#
}
#>
	}
<#
foreach( int __arity in __arities )
{
	var __tupleTypeName = __typeName + "<" + String.Join( ", ", Enumerable.Range( 1, __arity ).Select( num => "T" + num ) ) + ">";
#>
	[Serializable]
	internal class <#= __tupleTypeName #>
	{
<#
	for( int i = 1; i <= __arity; i++ )
	{
#>
		private readonly T<#= i #> _item<#= i #>;
		
		public T<#= i #> Item<#= i #>
		{
			get { return this._item<#= i #>; }
		}
<#
	}
#>
		public Tuple(
<#
	for( int i = 1; i <= __arity; i++ )
	{
#>
			T<#= i #> item<#= i #><#= i == __arity ? String.Empty : "," #>
<#
	}
#>
		)
		{
<#
	for( int i = 1; i <= __arity; i++ )
	{
#>
			this._item<#= i #> = item<#= i #>;
<#
	}
#>
		}
		
		public override string ToString()
		{
			var buffer = new StringBuilder();
			buffer.Append( '(' );
<#
	for( int i = 1; i <= __arity; i++ )
	{
#>
			buffer.Append( this._item<#= i #> );
<#
		if( i < __arity )
		{
#>
			buffer.Append( ", " );
<#
		}
	}
#>
			return buffer.ToString();
		}
	}
<#
}
#>
#endif // DEBUG
}