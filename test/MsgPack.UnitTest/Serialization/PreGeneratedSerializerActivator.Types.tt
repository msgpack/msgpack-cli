<#@ template hostSpecific="false"#>
<#@ output extension=".cs" #>
<#@ include file="AutoMessagePackSerializerTest.Polymorphism.ttinclude" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Numerics" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Numerics" #> 
<#
var collectionElementTypes =
	new []
	{
		typeof( object ).FullName,
		typeof( DateTime ).FullName,
		"MessagePackObject",
		typeof( int ).FullName,
	};

var enumUnderyingTypes =
	new []
	{
		typeof( byte ),
		typeof( sbyte ),
		typeof( short ),
		typeof( ushort ),
		typeof( int ), 
		typeof( uint ),
		typeof( long ),
		typeof( ulong ),
	};
var targetTypes =
	new string[]
	{
		"ComplexType",
		"ComplexTypeGenerated",
		"ComplexTypeGeneratedEnclosure",
		"ComplexTypeWithDataContract",
		"ComplexTypeWithDataContractWithOrder",
		"ComplexTypeWithOneBaseOrder",
		"ComplexTypeWithNonSerialized",
		"ComplexTypeWithTwoMember",
		"ComplexTypeWithoutAnyAttribute",
		"DataMemberAttributeNamedPropertyTestTarget",
		"Image",
		"TestValueType",
		"DayOfWeek",
		"VersioningTestTarget",
		"EnumDefault",
		"EnumByName",
		"EnumByUnderlyingValue",
		"EnumMemberObject",
	}.Concat( enumUnderyingTypes.Select( t => "Enum" + t.Name )
	).Concat( enumUnderyingTypes.Select( t => "Enum" + t.Name  + "Flags" )
	).ToArray();

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace MsgPack.Serialization
{
	internal static partial class PreGeneratedSerializerActivator
	{
		private static IList<Type> InitializeKnownTypes()
		{
			var result = new List<Type>();
<#
	foreach ( var collectionElementType in collectionElementTypes )
	{
#>
			result.Add( typeof( AddOnlyCollection<#= "<" + collectionElementType + ">" #> ) ); 
			result.Add( typeof( AddOnlyCollection<#= "<" + collectionElementType + "[]>" #> ) ); 
			result.Add( typeof( SimpleCollection<#= "<" + collectionElementType + ">" #> ) ); 
			result.Add( typeof( SimpleCollection<#= "<" + collectionElementType + "[]>" #> ) ); 
			result.Add( typeof( Collection<#= "<" + collectionElementType + ">" #> ) ); 
			result.Add( typeof( Collection<#= "<" + collectionElementType + "[]>" #> ) ); 
			result.Add( typeof( HashSet<#= "<" + collectionElementType + ">" #> ) ); 
			result.Add( typeof( HashSet<#= "<" + collectionElementType + "[]>" #> ) ); 
#if !NET35
			result.Add( typeof( ObservableCollection<#= "<" + collectionElementType + ">" #> ) ); 
			result.Add( typeof( ObservableCollection<#= "<" + collectionElementType + "[]>" #> ) ); 
#endif // !NET35
			result.Add( typeof( StringKeyedCollection<#= "<" + collectionElementType + ">" #> ) ); 
			result.Add( typeof( StringKeyedCollection<#= "<" + collectionElementType + "[]>" #> ) ); 
<#
	}

	foreach ( var targetType in targetTypes )
	{
#>
			result.Add( typeof( <#= targetType #> ) ); 
<#
	}
#>
			result.Add( typeof( ListValueType<int> ) );
			result.Add( typeof( DictionaryValueType<int, int> ) );
			result.Add( typeof( WithAbstractInt32Collection ) );
			result.Add( typeof( WithAbstractStringCollection ) );
			result.Add( typeof( WithAbstractNonCollection ) );
			result.Add( typeof( HasEnumerable ) );
			result.Add( typeof( Outer ) );
			result.Add( typeof( Inner ) );
			result.Add( typeof( PlainClass ) );
			result.Add( typeof( AnnotatedClass ) );
			result.Add( typeof( DataMamberClass ) );
#if !UNITY
<#
	var wasNet35Supported = true;
	foreach ( var targetType in GetSerialiazablePolymprohicTestTypeNames() )
	{
		if ( targetType.IsNet35Supported )
		{
			if ( !wasNet35Supported )
			{
#>
#endif // !NET35
<#				
			}
		}
		else
		{
			if ( wasNet35Supported )
			{
#>
#if !NET35
<#				
			}
		}
		
		wasNet35Supported = targetType.IsNet35Supported;
#>
			result.Add( typeof( <#= targetType.Name #> ) ); 
<#
	}
	if ( !wasNet35Supported )
	{
#>
#endif // !NET35
<#				
	}
#>
#else
			result.Add( typeof( PolymorphicMemberTypeMixed ) ); 
			result.Add( typeof( AbstractClassMemberKnownType ) ); 
			result.Add( typeof( AbstractClassMemberRuntimeType ) ); 
			result.Add( typeof( AbstractClassListItemKnownType ) ); 
			result.Add( typeof( AbstractClassListItemRuntimeType ) ); 
			result.Add( typeof( AbstractClassDictKeyKnownType ) ); 
			result.Add( typeof( AbstractClassDictKeyRuntimeType ) ); 
			result.Add( typeof( InterfaceMemberKnownType ) ); 
			result.Add( typeof( InterfaceMemberRuntimeType ) ); 
			result.Add( typeof( InterfaceListItemKnownType ) ); 
			result.Add( typeof( InterfaceListItemRuntimeType ) ); 
			result.Add( typeof( InterfaceDictKeyKnownType ) ); 
			result.Add( typeof( InterfaceDictKeyRuntimeType ) ); 
			result.Add( typeof( AbstractClassCollectionNoAttribute ) ); 
			result.Add( typeof( AbstractClassCollectionKnownType ) ); 
			result.Add( typeof( AbstractClassCollectionRuntimeType ) ); 
			result.Add( typeof( InterfaceCollectionNoAttribute ) ); 
			result.Add( typeof( InterfaceCollectionKnownType ) ); 
			result.Add( typeof( InterfaceCollectionRuntimeType ) ); 
#endif // !UNITY

			result.Add( typeof( GenericNonCollectionType ) );
			result.Add( typeof( NonGenericNonCollectionType ) );
			return result;
		}
	}
}
