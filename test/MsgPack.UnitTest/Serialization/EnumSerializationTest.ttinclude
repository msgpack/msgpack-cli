<#+ 
private void GenerateCore( string serializationMethod, string emitterFlavor, bool canDump, bool forIos, string language = "" )
{
	var testCases =
		new []
		{
			// Context, TypeAttribute, MemberAttribute, EnumMember
			Tuple.Create( default( string ), default( string ), default( string ), "ByName" ),
			Tuple.Create( default( string ), default( string ), "Default", "ByName" ),
			Tuple.Create( default( string ), default( string ), "ByName", "ByName" ),
			Tuple.Create( default( string ), default( string ), "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( default( string ), "ByName", default( string ), "ByName" ),
			Tuple.Create( default( string ), "ByName", "Default", "ByName" ),
			Tuple.Create( default( string ), "ByName", "ByName", "ByName" ),
			Tuple.Create( default( string ), "ByName", "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( default( string ), "ByUnderlyingValue", default( string ), "ByUnderlyingValue" ),
			Tuple.Create( default( string ), "ByUnderlyingValue", "Default", "ByUnderlyingValue" ),
			Tuple.Create( default( string ), "ByUnderlyingValue", "ByName", "ByName" ),
			Tuple.Create( default( string ), "ByUnderlyingValue", "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( "ByName", default( string ), default( string ), "ByName" ),
			Tuple.Create( "ByName", default( string ), "Default", "ByName" ),
			Tuple.Create( "ByName", default( string ), "ByName", "ByName" ),
			Tuple.Create( "ByName", default( string ), "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( "ByName", "ByName", default( string ), "ByName" ),
			Tuple.Create( "ByName", "ByName", "Default", "ByName" ),
			Tuple.Create( "ByName", "ByName", "ByName", "ByName" ),
			Tuple.Create( "ByName", "ByName", "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( "ByName", "ByUnderlyingValue", default( string ), "ByUnderlyingValue" ),
			Tuple.Create( "ByName", "ByUnderlyingValue", "Default", "ByUnderlyingValue" ),
			Tuple.Create( "ByName", "ByUnderlyingValue", "ByName", "ByName" ),
			Tuple.Create( "ByName", "ByUnderlyingValue", "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", default( string ), default( string ), "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", default( string ), "Default", "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", default( string ), "ByName", "ByName" ),
			Tuple.Create( "ByUnderlyingValue", default( string ), "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", "ByName", default( string ), "ByName" ),
			Tuple.Create( "ByUnderlyingValue", "ByName", "Default", "ByName" ),
			Tuple.Create( "ByUnderlyingValue", "ByName", "ByName", "ByName" ),
			Tuple.Create( "ByUnderlyingValue", "ByName", "ByUnderlyingValue", "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", "ByUnderlyingValue", default( string ), "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", "ByUnderlyingValue", "Default", "ByUnderlyingValue" ),
			Tuple.Create( "ByUnderlyingValue", "ByUnderlyingValue", "ByName", "ByName" ),
			Tuple.Create( "ByUnderlyingValue", "ByUnderlyingValue", "ByUnderlyingValue", "ByUnderlyingValue" ),
		};

	var underlyingTypes =
		new []
		{
			Tuple.Create( "byte", typeof( byte ) ),
			Tuple.Create( "sbyte", typeof( sbyte ) ),
			Tuple.Create( "short", typeof( short ) ),
			Tuple.Create( "ushort", typeof( ushort ) ),
			Tuple.Create( "int", typeof( int ) ),
			Tuple.Create( "uint", typeof( uint ) ),
			Tuple.Create( "long", typeof( long ) ),
			Tuple.Create( "ulong", typeof( ulong ) ),
		};

#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2014-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
<#+
	if ( !forIos )
	{
#>
using System.Diagnostics;
<#+
	}
#>
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text.RegularExpressions;
#if FEATURE_TAP
using System.Threading;
using System.Threading.Tasks;
#endif // FEATURE_TAP

<#+
	if ( !forIos )
	{
#>
#if !SILVERLIGHT && !AOT && !NETSTANDARD1_1 && !NETSTANDARD1_3
using MsgPack.Serialization.CodeDomSerializers;
using MsgPack.Serialization.EmittingSerializers;
#endif // !SILVERLIGHT && !AOT && !NETSTANDARD1_1 && !NETSTANDARD1_3
<#+
	}
#>

#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using SetUpAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestInitializeAttribute;
using TearDownAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestCleanupAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack.Serialization
{
	[TestFixture]
	[Timeout( 30000 )]
	public class <#= serializationMethod #><#= language #><#= emitterFlavor #>EnumSerializerTest
	{
		private SerializationContext GetSerializationContext()
		{
<#+
	if ( !forIos )
	{
#>
			var context = new SerializationContext { SerializationMethod = SerializationMethod.<#= serializationMethod #> };
			context.SerializerOptions.EmitterFlavor = EmitterFlavor.<#= emitterFlavor #>;
			return context;
<#+
	}
	else
	{
#>
			return PreGeneratedSerializerActivator.CreateContext( SerializationMethod.<#= serializationMethod #>, SerializationContext.Default.CompatibilityOptions.PackerCompatibilityOptions );
<#+
	}
#>
		}
<#+
	if ( !forIos )
	{
#>
		private bool CanDump
		{
			get { return <#= canDump.ToString().ToLowerInvariant() #>; }
		}

#if !SILVERLIGHT && !AOT
		[SetUp]
		public void SetUp()
		{
<#+
		if ( emitterFlavor == "ExpressionBased" )
		{
#>
#warning TODO: true async
			SerializerDebugging.IsNaiveAsyncAllowed = true;
<#+
		}
#>
#if !NETSTANDARD1_1 && !NETSTANDARD1_3
			//SerializerDebugging.TraceEnabled = true;
			//SerializerDebugging.DumpEnabled = true;
			if ( SerializerDebugging.TraceEnabled )
			{
				Tracer.Emit.Listeners.Clear();
				Tracer.Emit.Switch.Level = SourceLevels.All;
				Tracer.Emit.Listeners.Add( new ConsoleTraceListener() );
			}

			SerializerDebugging.DependentAssemblyManager = new TempFileDependentAssemblyManager( TestContext.CurrentContext.TestDirectory );
			SerializerDebugging.DeletePastTemporaries();
			SerializerDebugging.OnTheFlyCodeGenerationEnabled = true;

#if NET35
			SerializerDebugging.SetCodeCompiler( CodeDomCodeGeneration.Compile );
#else
			SerializerDebugging.SetCodeCompiler( RoslyCodeGeneration.Compile );
#endif // NET35

			SerializerDebugging.DumpDirectory = TestContext.CurrentContext.TestDirectory;
			SerializerDebugging.AddRuntimeAssembly( typeof( AddOnlyCollection<> ).Assembly.Location );
			if( typeof( AddOnlyCollection<> ).Assembly != this.GetType().Assembly )
			{
				SerializerDebugging.AddRuntimeAssembly( this.GetType().Assembly.Location );
			}
#endif // !NETSTANDARD1_1 && !NETSTANDARD1_3
		}

		[TearDown]
		public void TearDown()
		{
#if !NETSTANDARD1_1 && !NETSTANDARD1_3
			if ( SerializerDebugging.DumpEnabled && this.CanDump )
			{
				try
				{
					SerializerDebugging.Dump();
				}
				catch ( NotSupportedException ex )
				{
					Console.Error.WriteLine( ex );
				}
				finally
				{
					SerializationMethodGeneratorManager.Refresh();
				}
			}

			SerializerDebugging.Reset();
			SerializerDebugging.OnTheFlyCodeGenerationEnabled = false;
#endif // !NETSTANDARD1_1 && !NETSTANDARD1_3
		}
#endif // !SILVERLIGHT && !AOT
<#+
	} // if !forIos
#>
		private static void TestEnumForByNameCore<T>( Stream stream, T value, T deserialized, string property )
		{
				if ( property == null )
				{
					Assert.That( deserialized, Is.EqualTo( value ) );
					stream.Position = 0;
					Assert.That( Unpacking.UnpackString( stream ), Is.EqualTo( value.ToString() ) );
				}
				else
				{
					var propertyInfo = typeof( T ).GetProperty( property );
#if !UNITY
					Assert.That( propertyInfo.GetValue( deserialized, null ), Is.EqualTo( propertyInfo.GetValue( value, null ) ) );
#else
					Assert.That( propertyInfo.GetGetMethod().Invoke( deserialized, null ), Is.EqualTo( propertyInfo.GetGetMethod().Invoke( value, null ) ) );
#endif // !UNITY
					stream.Position = 0;
<#+
	if ( serializationMethod == "Array" )
	{
#>
					// Properties are sorted by lexical order
					var index = Array.IndexOf( typeof( T ).GetProperties().OrderBy( p => p.Name ).ToArray(), propertyInfo );
					var result = Unpacking.UnpackArray( stream );
					Assert.That(
#if !UNITY
						result[ index ].Equals( propertyInfo.GetValue( value, null ).ToString() ),
						result[ index ] + " == " + propertyInfo.GetValue( value, null )
#else
						result[ index ].Equals( propertyInfo.GetGetMethod().Invoke( value, null ).ToString() ),
						result[ index ] + " == " + propertyInfo.GetGetMethod().Invoke( value, null )
#endif // !UNITY
					);
<#+
	}
	else
	{
#>
					var result = Unpacking.UnpackDictionary( stream );
					Assert.That(
#if !UNITY
						result[ property ].Equals( propertyInfo.GetValue( value, null ).ToString() ),
						result[ property ] + " == " + propertyInfo.GetValue( value, null )
#else
						result[ property ].Equals( propertyInfo.GetGetMethod().Invoke( value, null ).ToString() ),
						result[ property ] + " == " + propertyInfo.GetGetMethod().Invoke( value, null )
#endif // !UNITY
					);
<#+
	}
#>
				}
		}

		private static void TestEnumForByName<T>( SerializationContext context, T value, string property )
		{
			var serializer = context.GetSerializer<T>();

			using ( var stream = new MemoryStream() )
			{
				serializer.Pack( stream, value );
				stream.Position = 0;
				var deserialized = serializer.Unpack( stream );
				TestEnumForByNameCore( stream, value, deserialized, property );
			}
		}

#if FEATURE_TAP

		private static async Task TestEnumForByNameAsync<T>( SerializationContext context, T value, string property )
		{
			var serializer = context.GetSerializer<T>();

			using ( var stream = new MemoryStream() )
			{
				await serializer.PackAsync( stream, value, CancellationToken.None ).ConfigureAwait( false );
				stream.Position = 0;
				var deserialized = await serializer.UnpackAsync( stream, CancellationToken.None ).ConfigureAwait( false );
				TestEnumForByNameCore( stream, value, deserialized, property );
			}
		}

#endif // FEATURE_TAP

		private static void TestEnumForByUnderlyingValueCore<T>( Stream stream, T value, T deserialized, string property )
		{

				if ( property == null )
				{
					Assert.That( deserialized, Is.EqualTo( value ) );
					stream.Position = 0;
					var result = Unpacking.UnpackObject( stream );
					Assert.That( 
						result.ToString().Equals( ( ( IFormattable )value ).ToString( "D", null ) ),
						result + " == " + ( ( IFormattable )value ).ToString( "D", null ) 
					);
				}
				else
				{
					var propertyInfo = typeof( T ).GetProperty( property );
#if !UNITY
					Assert.That( propertyInfo.GetValue( deserialized, null ), Is.EqualTo( propertyInfo.GetValue( value, null ) ) );
#else
					Assert.That( propertyInfo.GetGetMethod().Invoke( deserialized, null ), Is.EqualTo( propertyInfo.GetGetMethod().Invoke( value, null ) ) );
#endif // !UNITY
					stream.Position = 0;
<#+
	if ( serializationMethod == "Array" )
	{
#>
					var result = Unpacking.UnpackArray( stream );
					// Properties are sorted by lexical order
					var index = Array.IndexOf( typeof( T ).GetProperties().OrderBy( p => p.Name ).ToArray(), propertyInfo );
					Assert.That(
#if !UNITY
						result[ index ].ToString().Equals( ( ( IFormattable )propertyInfo.GetValue( value, null ) ).ToString( "D", null ) ),
						result[ index ] + " == " + ( ( IFormattable )propertyInfo.GetValue( value , null) ).ToString( "D", null )
#else
						result[ index ].ToString().Equals( ( ( IFormattable )propertyInfo.GetGetMethod().Invoke( value, null ) ).ToString( "D", null ) ),
						result[ index ] + " == " + ( ( IFormattable )propertyInfo.GetGetMethod().Invoke( value , null) ).ToString( "D", null )
#endif // !UNITY
					);
<#+
	}
	else
	{
#>
					var result = Unpacking.UnpackDictionary( stream );
					Assert.That(
#if !UNITY
						result[ property ].ToString().Equals( ( ( IFormattable )propertyInfo.GetValue( value, null ) ).ToString( "D", null ) ),
						result[ property ] + " == " + ( ( IFormattable )propertyInfo.GetValue( value, null ) ).ToString( "D", null )
#else
						result[ property ].ToString().Equals( ( ( IFormattable )propertyInfo.GetGetMethod().Invoke( value, null ) ).ToString( "D", null ) ),
						result[ property ] + " == " + ( ( IFormattable )propertyInfo.GetGetMethod().Invoke( value, null ) ).ToString( "D", null )
#endif // !UNITY
					);
<#+
	}
#>
				}
		}

		private static void TestEnumForByUnderlyingValue<T>( SerializationContext context, T value, string property )
		{
			var serializer = context.GetSerializer<T>();

			using ( var stream = new MemoryStream() )
			{
				serializer.Pack( stream, value );
				stream.Position = 0;
				var deserialized = serializer.Unpack( stream );
				TestEnumForByUnderlyingValueCore( stream, value, deserialized, property );
			}
		}

#if FEATURE_TAP

		private static async Task TestEnumForByUnderlyingValueAsync<T>( SerializationContext context, T value, string property )
		{
			var serializer = context.GetSerializer<T>();

			using ( var stream = new MemoryStream() )
			{
				await serializer.PackAsync( stream, value, CancellationToken.None ).ConfigureAwait( false );
				stream.Position = 0;
				var deserialized = await serializer.UnpackAsync( stream, CancellationToken.None ).ConfigureAwait( false );
				TestEnumForByUnderlyingValueCore( stream, value, deserialized, property );
			}
		}


#endif // FEATURE_TAP

<#+
	foreach ( var testCase in testCases )
	{
		if ( testCase.Item2 == null && ( testCase.Item3 == null || testCase.Item3 == "Default" ) && forIos )
		{
			// Context behavior is not testable in generated serializers because it was determined when testing target had been generated.
			continue;
		}
#>

		[Test]
		public void TestSerializationMethod_ContextIs<#= testCase.Item1 ?? "Default" #>_TypeIs<#= testCase.Item2 ?? "None" #>_MemberIs<#= testCase.Item3 ?? "None" #>()
		{
			var context = this.GetSerializationContext();
<#+
		if ( testCase.Item1 != null )
		{
#>
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.<#= testCase.Item1 #>;
			try
			{
<#+
		}
#>
			<#= testCase.Item1 != null ? "\t" : "" #>TestEnumFor<#= testCase.Item4 #>( context, <#= testCase.Item3 != null ? "new EnumMemberObject()" : "Enum" + ( testCase.Item2 ?? "Default" ) + ".Foo" #>, <#= testCase.Item3 == null ? "null" : "\"" + ( testCase.Item2 ?? "Default" ) + ( testCase.Item3 ?? "NoAttribute" ) + "Property\""  #> );
<#+
		if ( testCase.Item1 != null )
		{
#>
			}
			finally
			{
				context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			}
<#+
		}
#>
		}
<#+

		if ( testCase.Item1 == null && testCase.Item3 == null )
		{
			// Most normal case, so let's test async.
#>

#if FEATURE_TAP

		[Test]
		public async Task TestAsyncSerializationMethod_ContextIs<#= testCase.Item1 ?? "Default" #>_TypeIs<#= testCase.Item2 ?? "None" #>_MemberIs<#= testCase.Item3 ?? "None" #>()
		{
			var context = this.GetSerializationContext();
<#+
		if ( testCase.Item1 != null )
		{
#>
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.<#= testCase.Item1 #>;
			try
			{
<#+
		}
#>
			await <#= testCase.Item1 != null ? "\t" : "" #>TestEnumFor<#= testCase.Item4 #>Async( context, <#= testCase.Item3 != null ? "new EnumMemberObject()" : "Enum" + ( testCase.Item2 ?? "Default" ) + ".Foo" #>, <#= testCase.Item3 == null ? "null" : "\"" + ( testCase.Item2 ?? "Default" ) + ( testCase.Item3 ?? "NoAttribute" ) + "Property\""  #> );
<#+
		if ( testCase.Item1 != null )
		{
#>
			}
			finally
			{
				context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			}
<#+
		}
#>
		}

#endif // FEATURE_TAP

<#+
		}
	}

	foreach ( var underlyingType in underlyingTypes )
	{
		CreateEnumTest( underlyingType.Item2, false, true );
	}
#>

		// Issue #184
		[Test]
		public void TestEnumKeyTransformer_Default_AsIs()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			Assert.That( context.EnumSerializationOptions.NameTransformer, Is.Null, "default value" );
			TestEnumKeyCore( context, "ToEven", isAsync: false );
		}

#if FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_Default_AsIs_Async()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			Assert.That( context.EnumSerializationOptions.NameTransformer, Is.Null, "default value" );
			TestEnumKeyCore( context, "ToEven", isAsync: true );
		}

#endif // FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_LowerCamel()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			context.EnumSerializationOptions.NameTransformer = EnumNameTransformers.LowerCamel;
			TestEnumKeyCore( context, "toEven", isAsync: false );
		}

#if FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_LowerCamel_Async()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			context.EnumSerializationOptions.NameTransformer = EnumNameTransformers.LowerCamel;
			TestEnumKeyCore( context, "toEven", isAsync: true );
		}

#endif // FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_AllUpper()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			context.EnumSerializationOptions.NameTransformer = EnumNameTransformers.UpperSnake;
			TestEnumKeyCore( context, "TO_EVEN", isAsync: false );
		}

#if FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_AllUpper_Async()
		{
			var context = GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			context.EnumSerializationOptions.NameTransformer = EnumNameTransformers.UpperSnake;
			TestEnumKeyCore( context, "TO_EVEN", isAsync: true );
		}

#endif // FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_Custom()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			context.EnumSerializationOptions.NameTransformer = 
				key => Regex.Replace( key, "[A-Z]", match => match.Index == 0 ? match.Value.ToLower() : "-" + match.Value.ToLower() );
			TestEnumKeyCore( context, "to-even", isAsync: false );
		}

#if FEATURE_TAP

		[Test]
		public void TestEnumKeyTransformer_Custom_Async()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			context.EnumSerializationOptions.NameTransformer = 
				key => Regex.Replace( key, "[A-Z]", match => match.Index == 0 ? match.Value.ToLower() : "-" + match.Value.ToLower() );
			TestEnumKeyCore( context, "to-even", isAsync: true );
		}

#endif // FEATURE_TAP

		private static void TestEnumKeyCore( SerializationContext context, string expected, bool isAsync )
		{
			var serializer = context.GetSerializer<MidpointRounding>();
			var obj = MidpointRounding.ToEven;
			using ( var buffer = new MemoryStream() )
			{
#if FEATURE_TAP
				if ( isAsync )
				{
					serializer.PackAsync( buffer, obj, CancellationToken.None ).Wait();
				}
				else
				{
#endif // FEATURE_TAP
					serializer.Pack( buffer, obj );
#if FEATURE_TAP
				}
#endif // FEATURE_TAP

				buffer.Position = 0;
				var stringValue = MessagePackSerializer.UnpackMessagePackObject( buffer ).AsString();

				Assert.That( stringValue, Is.EqualTo( expected ) );

				buffer.Position = 0;

				MidpointRounding deserialized;
#if FEATURE_TAP
				if ( isAsync )
				{
					deserialized = serializer.UnpackAsync( buffer, CancellationToken.None ).Result;
				}
				else
				{
#endif // FEATURE_TAP
					deserialized = serializer.Unpack( buffer );
#if FEATURE_TAP
				}
#endif // FEATURE_TAP

				Assert.That( deserialized, Is.EqualTo( obj ) );
			}
		}
	}
}
<#+
} // GenerateCore()

private void CreateEnumTest( Type underlyingType, bool useBuilder, bool canBeFlags, params string[] builtMemberNames )
{
	if ( useBuilder )
	{
#>
#if !SILVERLIGHT && !AOT
<#+
	}
#>

		[Test]
		public void TestEnum<#= underlyingType.Name #>_WithoutFlags_ByName()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			try
			{
<#+
	if ( useBuilder )
	{
#>
				TestEnumForByName( context, Create<#= underlyingType.Name #>EnumType( false ), "<#= builtMemberNames[ 0 ] #>" );
<#+
	}
	else
	{
#>
				TestEnumForByName( context, Enum<#= underlyingType.Name #>.Foo, null );
<#+
	}
#>
			}
			finally
			{
				context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			}
		}

		[Test]
		public void TestEnum<#= underlyingType.Name #>_WithoutFlags_ByUnderlyingValue()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByUnderlyingValue;
			try
			{
<#+
	if ( useBuilder )
	{
#>
				TestEnumForByUnderlyingValue( context, Create<#= underlyingType.Name #>EnumType( false ), "<#= builtMemberNames[ 0 ] #>" );
<#+
	}
	else
	{
#>
				TestEnumForByUnderlyingValue( context, Enum<#= underlyingType.Name #>.Foo, null );
<#+
	}
#>
			}
			finally
			{
				context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			}
		}
<#+
	if ( canBeFlags )
	{
#>

		[Test]
		public void TestEnum<#= underlyingType.Name #>_WithFlags_ByName()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			try
			{
<#+
	if ( useBuilder )
	{
#>
				TestEnumForByName( context, Create<#= underlyingType.Name #>EnumType( true ), <#= string.Join( ", ", builtMemberNames.Select( name => "\"" + name + "\"" ) ) #> );
<#+
	}
	else
	{
#>
				TestEnumForByName( context, Enum<#= underlyingType.Name #>Flags.Foo | Enum<#= underlyingType.Name #>Flags.Bar, null );
<#+
	}
#>
			}
			finally
			{
				context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			}
		}

		[Test]
		public void TestEnum<#= underlyingType.Name #>_WithFlags_ByUnderlyingValue()
		{
			var context = this.GetSerializationContext();
			context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByUnderlyingValue;
			try
			{
<#+
	if ( useBuilder )
	{
#>
				TestEnumForByUnderlyingValue( context, Create<#= underlyingType.Name #>EnumType( true ), <#= string.Join( ", ", builtMemberNames.Select( name => "\"" + name + "\"" ) ) #> );
<#+
	}
	else
	{
#>
				TestEnumForByUnderlyingValue( context, Enum<#= underlyingType.Name #>Flags.Foo | Enum<#= underlyingType.Name #>Flags.Bar, null );
<#+
	}
#>
			}
			finally
			{
				context.EnumSerializationOptions.SerializationMethod = EnumSerializationMethod.ByName;
			}
		}
<#+
	} // if canBeFlags

	if ( useBuilder )
	{
#>
#endif // !SILVERLIGHT && !AOT
<#+
	}

} // CreateEnumTest()
#>
