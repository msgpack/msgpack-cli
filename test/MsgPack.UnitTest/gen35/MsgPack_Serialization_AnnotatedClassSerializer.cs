//------------------------------------------------------------------------------
// <auto-generated>
//     このコードはツールによって生成されました。
//     ランタイム バージョン:2.0.50727.8745
//
//     このファイルへの変更は、以下の状況下で不正な動作の原因になったり、
//     コードが再生成されるときに損失したりします。
// </auto-generated>
//------------------------------------------------------------------------------

namespace MsgPack.Serialization.GeneratedSerializers {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("MsgPack.Serialization.CodeDomSerializers.CodeDomSerializerBuilder", "0.9.0.0")]
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public class MsgPack_Serialization_AnnotatedClassSerializer : MsgPack.Serialization.MessagePackSerializer<MsgPack.Serialization.AnnotatedClass> {
        
        private MsgPack.Serialization.MessagePackSerializer<int> _serializer0;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicProperty0;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicField0;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonSerializedNonPublicField1;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.List<int>> _serializer1;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicCollectionProperty1;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicCollectionField2;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicCollectionReadOnlyProperty2;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicCollectionReadOnlyField3;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicDictionaryProperty3;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.Generic.Dictionary<string, int>> _serializer2;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicDictionaryField4;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicDictionaryReadOnlyProperty4;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicDictionaryReadOnlyField5;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicIDictionaryProperty5;
        
        private MsgPack.Serialization.MessagePackSerializer<System.Collections.IDictionary> _serializer3;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicIDictionaryField6;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_get_NonPublicIDictionaryReadOnlyProperty6;
        
        private System.Reflection.FieldInfo _fieldAnnotatedClass_NonPublicIDictionaryReadOnlyField7;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>> _packOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>> _packOperationTable;
        
        private System.Collections.Generic.IDictionary<string, System.Func<MsgPack.Serialization.AnnotatedClass, bool>> _nullCheckersTable;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, int> this_SetUnpackedValueOfPublicPropertyDelegate;
        
        private System.Func<MsgPack.Unpacker, System.Type, string, int> MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, int> this_SetUnpackedValueOfPublicFieldDelegate;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_set_NonPublicProperty7;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, int> this_SetUnpackedValueOfNonPublicPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, int> this_SetUnpackedValueOfNonPublicFieldDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, int> this_SetUnpackedValueOfNonSerializedPublicFieldDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, int> this_SetUnpackedValueOfNonSerializedNonPublicFieldDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> this_SetUnpackedValueOfCollectionReadOnlyPropertyDelegate;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_set_NonPublicCollectionProperty8;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> this_SetUnpackedValueOfNonPublicCollectionPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> this_SetUnpackedValueOfNonPublicCollectionFieldDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> this_SetUnpackedValueOfNonPublicCollectionReadOnlyPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> this_SetUnpackedValueOfNonPublicCollectionReadOnlyFieldDelegate;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_set_NonPublicDictionaryProperty9;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> this_SetUnpackedValueOfNonPublicDictionaryPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> this_SetUnpackedValueOfNonPublicDictionaryFieldDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> this_SetUnpackedValueOfNonPublicDictionaryReadOnlyPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> this_SetUnpackedValueOfNonPublicDictionaryReadOnlyFieldDelegate;
        
        private System.Reflection.MethodBase _methodBaseAnnotatedClass_set_NonPublicIDictionaryProperty10;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> this_SetUnpackedValueOfNonPublicIDictionaryPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> this_SetUnpackedValueOfNonPublicIDictionaryFieldDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> this_SetUnpackedValueOfNonPublicIDictionaryReadOnlyPropertyDelegate;
        
        private System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> this_SetUnpackedValueOfNonPublicIDictionaryReadOnlyFieldDelegate;
        
        private System.Collections.Generic.IList<string> _memberNames;
        
        private System.Collections.Generic.IList<System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>> _unpackOperationList;
        
        private System.Collections.Generic.IDictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>> _unpackOperationTable;
        
        public MsgPack_Serialization_AnnotatedClassSerializer(MsgPack.Serialization.SerializationContext context) : 
                base(context, (MsgPack.Serialization.SerializerCapabilities.PackTo | MsgPack.Serialization.SerializerCapabilities.UnpackFrom)) {
            MsgPack.Serialization.PolymorphismSchema schema0 = default(MsgPack.Serialization.PolymorphismSchema);
            schema0 = null;
            this._serializer0 = context.GetSerializer<int>(schema0);
            MsgPack.Serialization.PolymorphismSchema schema1 = default(MsgPack.Serialization.PolymorphismSchema);
            schema1 = null;
            this._serializer1 = context.GetSerializer<System.Collections.Generic.List<int>>(schema1);
            MsgPack.Serialization.PolymorphismSchema schema2 = default(MsgPack.Serialization.PolymorphismSchema);
            schema2 = null;
            this._serializer2 = context.GetSerializer<System.Collections.Generic.Dictionary<string, int>>(schema2);
            MsgPack.Serialization.PolymorphismSchema schema3 = default(MsgPack.Serialization.PolymorphismSchema);
            schema3 = null;
            this._serializer3 = context.GetSerializer<System.Collections.IDictionary>(schema3);
            this._fieldAnnotatedClass_NonPublicField0 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicField");
            this._fieldAnnotatedClass_NonSerializedNonPublicField1 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonSerializedNonPublicField");
            this._fieldAnnotatedClass_NonPublicCollectionField2 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicCollectionField");
            this._fieldAnnotatedClass_NonPublicCollectionReadOnlyField3 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicCollectionReadOnlyField");
            this._fieldAnnotatedClass_NonPublicDictionaryField4 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicDictionaryField");
            this._fieldAnnotatedClass_NonPublicDictionaryReadOnlyField5 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicDictionaryReadOnlyField");
            this._fieldAnnotatedClass_NonPublicIDictionaryField6 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicIDictionaryField");
            this._fieldAnnotatedClass_NonPublicIDictionaryReadOnlyField7 = MsgPack.Serialization.ReflectionHelpers.GetField(typeof(MsgPack.Serialization.AnnotatedClass), "NonPublicIDictionaryReadOnlyField");
            this._methodBaseAnnotatedClass_get_NonPublicProperty0 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_get_NonPublicCollectionProperty1 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicCollectionProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_get_NonPublicCollectionReadOnlyProperty2 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicCollectionReadOnlyProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_get_NonPublicDictionaryProperty3 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicDictionaryProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_get_NonPublicDictionaryReadOnlyProperty4 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicDictionaryReadOnlyProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_get_NonPublicIDictionaryProperty5 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicIDictionaryProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_get_NonPublicIDictionaryReadOnlyProperty6 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "get_NonPublicIDictionaryReadOnlyProperty", new System.Type[0]);
            this._methodBaseAnnotatedClass_set_NonPublicProperty7 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "set_NonPublicProperty", new System.Type[] {
                        typeof(int)});
            this._methodBaseAnnotatedClass_set_NonPublicCollectionProperty8 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "set_NonPublicCollectionProperty", new System.Type[] {
                        typeof(System.Collections.Generic.List<int>)});
            this._methodBaseAnnotatedClass_set_NonPublicDictionaryProperty9 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "set_NonPublicDictionaryProperty", new System.Type[] {
                        typeof(System.Collections.Generic.Dictionary<string, int>)});
            this._methodBaseAnnotatedClass_set_NonPublicIDictionaryProperty10 = MsgPack.Serialization.ReflectionHelpers.GetMethod(typeof(MsgPack.Serialization.AnnotatedClass), "set_NonPublicIDictionaryProperty", new System.Type[] {
                        typeof(System.Collections.IDictionary)});
            System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>[] packOperationList = default(System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>[]);
            packOperationList = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>[22];
            packOperationList[0] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfAlias);
            packOperationList[1] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfPublicField);
            packOperationList[2] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackMemberPlaceHolder);
            packOperationList[3] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackMemberPlaceHolder);
            packOperationList[4] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicProperty);
            packOperationList[5] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicField);
            packOperationList[6] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonSerializedPublicField);
            packOperationList[7] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackMemberPlaceHolder);
            packOperationList[8] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonSerializedNonPublicField);
            packOperationList[9] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfCollectionReadOnlyProperty);
            packOperationList[10] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionProperty);
            packOperationList[11] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionField);
            packOperationList[12] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionReadOnlyProperty);
            packOperationList[13] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionReadOnlyField);
            packOperationList[14] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryProperty);
            packOperationList[15] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryField);
            packOperationList[16] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryReadOnlyProperty);
            packOperationList[17] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryReadOnlyField);
            packOperationList[18] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryProperty);
            packOperationList[19] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryField);
            packOperationList[20] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryReadOnlyProperty);
            packOperationList[21] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryReadOnlyField);
            this._packOperationList = packOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>> packOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>>);
            packOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>>(19);
            packOperationTable["Alias"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfAlias);
            packOperationTable["PublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfPublicField);
            packOperationTable["NonPublicProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicProperty);
            packOperationTable["NonPublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicField);
            packOperationTable["NonSerializedPublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonSerializedPublicField);
            packOperationTable["NonSerializedNonPublicField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonSerializedNonPublicField);
            packOperationTable["CollectionReadOnlyProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfCollectionReadOnlyProperty);
            packOperationTable["NonPublicCollectionProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionProperty);
            packOperationTable["NonPublicCollectionField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionField);
            packOperationTable["NonPublicCollectionReadOnlyProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionReadOnlyProperty);
            packOperationTable["NonPublicCollectionReadOnlyField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicCollectionReadOnlyField);
            packOperationTable["NonPublicDictionaryProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryProperty);
            packOperationTable["NonPublicDictionaryField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryField);
            packOperationTable["NonPublicDictionaryReadOnlyProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryReadOnlyProperty);
            packOperationTable["NonPublicDictionaryReadOnlyField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicDictionaryReadOnlyField);
            packOperationTable["NonPublicIDictionaryProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryProperty);
            packOperationTable["NonPublicIDictionaryField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryField);
            packOperationTable["NonPublicIDictionaryReadOnlyProperty"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryReadOnlyProperty);
            packOperationTable["NonPublicIDictionaryReadOnlyField"] = new System.Action<MsgPack.Packer, MsgPack.Serialization.AnnotatedClass>(this.PackValueOfNonPublicIDictionaryReadOnlyField);
            this._packOperationTable = packOperationTable;
            System.Collections.Generic.Dictionary<string, System.Func<MsgPack.Serialization.AnnotatedClass, bool>> nullCheckerTable = default(System.Collections.Generic.Dictionary<string, System.Func<MsgPack.Serialization.AnnotatedClass, bool>>);
            nullCheckerTable = new System.Collections.Generic.Dictionary<string, System.Func<MsgPack.Serialization.AnnotatedClass, bool>>(13);
            nullCheckerTable["CollectionReadOnlyProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsCollectionReadOnlyPropertyNull);
            nullCheckerTable["NonPublicCollectionProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicCollectionPropertyNull);
            nullCheckerTable["NonPublicCollectionField"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicCollectionFieldNull);
            nullCheckerTable["NonPublicCollectionReadOnlyProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicCollectionReadOnlyPropertyNull);
            nullCheckerTable["NonPublicCollectionReadOnlyField"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicCollectionReadOnlyFieldNull);
            nullCheckerTable["NonPublicDictionaryProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicDictionaryPropertyNull);
            nullCheckerTable["NonPublicDictionaryField"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicDictionaryFieldNull);
            nullCheckerTable["NonPublicDictionaryReadOnlyProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicDictionaryReadOnlyPropertyNull);
            nullCheckerTable["NonPublicDictionaryReadOnlyField"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicDictionaryReadOnlyFieldNull);
            nullCheckerTable["NonPublicIDictionaryProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicIDictionaryPropertyNull);
            nullCheckerTable["NonPublicIDictionaryField"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicIDictionaryFieldNull);
            nullCheckerTable["NonPublicIDictionaryReadOnlyProperty"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicIDictionaryReadOnlyPropertyNull);
            nullCheckerTable["NonPublicIDictionaryReadOnlyField"] = new System.Func<MsgPack.Serialization.AnnotatedClass, bool>(this.IsNonPublicIDictionaryReadOnlyFieldNull);
            this._nullCheckersTable = nullCheckerTable;
            System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>[] unpackOperationList = default(System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>[]);
            unpackOperationList = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>[22];
            unpackOperationList[0] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfAlias);
            unpackOperationList[1] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfPublicField);
            unpackOperationList[2] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackMemberPlaceHolder);
            unpackOperationList[3] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackMemberPlaceHolder);
            unpackOperationList[4] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicProperty);
            unpackOperationList[5] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicField);
            unpackOperationList[6] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonSerializedPublicField);
            unpackOperationList[7] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackMemberPlaceHolder);
            unpackOperationList[8] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonSerializedNonPublicField);
            unpackOperationList[9] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfCollectionReadOnlyProperty);
            unpackOperationList[10] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionProperty);
            unpackOperationList[11] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionField);
            unpackOperationList[12] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionReadOnlyProperty);
            unpackOperationList[13] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionReadOnlyField);
            unpackOperationList[14] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryProperty);
            unpackOperationList[15] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryField);
            unpackOperationList[16] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryReadOnlyProperty);
            unpackOperationList[17] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryReadOnlyField);
            unpackOperationList[18] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryProperty);
            unpackOperationList[19] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryField);
            unpackOperationList[20] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryReadOnlyProperty);
            unpackOperationList[21] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryReadOnlyField);
            this._unpackOperationList = unpackOperationList;
            System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>> unpackOperationTable = default(System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>>);
            unpackOperationTable = new System.Collections.Generic.Dictionary<string, System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>>(19);
            unpackOperationTable["Alias"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfAlias);
            unpackOperationTable["PublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfPublicField);
            unpackOperationTable["NonPublicProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicProperty);
            unpackOperationTable["NonPublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicField);
            unpackOperationTable["NonSerializedPublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonSerializedPublicField);
            unpackOperationTable["NonSerializedNonPublicField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonSerializedNonPublicField);
            unpackOperationTable["CollectionReadOnlyProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfCollectionReadOnlyProperty);
            unpackOperationTable["NonPublicCollectionProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionProperty);
            unpackOperationTable["NonPublicCollectionField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionField);
            unpackOperationTable["NonPublicCollectionReadOnlyProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionReadOnlyProperty);
            unpackOperationTable["NonPublicCollectionReadOnlyField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicCollectionReadOnlyField);
            unpackOperationTable["NonPublicDictionaryProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryProperty);
            unpackOperationTable["NonPublicDictionaryField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryField);
            unpackOperationTable["NonPublicDictionaryReadOnlyProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryReadOnlyProperty);
            unpackOperationTable["NonPublicDictionaryReadOnlyField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicDictionaryReadOnlyField);
            unpackOperationTable["NonPublicIDictionaryProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryProperty);
            unpackOperationTable["NonPublicIDictionaryField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryField);
            unpackOperationTable["NonPublicIDictionaryReadOnlyProperty"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryReadOnlyProperty);
            unpackOperationTable["NonPublicIDictionaryReadOnlyField"] = new System.Action<MsgPack.Unpacker, MsgPack.Serialization.AnnotatedClass, int, int>(this.UnpackValueOfNonPublicIDictionaryReadOnlyField);
            this._unpackOperationTable = unpackOperationTable;
            this._memberNames = new string[] {
                    "Alias",
                    "PublicField",
                    null,
                    null,
                    "NonPublicProperty",
                    "NonPublicField",
                    "NonSerializedPublicField",
                    null,
                    "NonSerializedNonPublicField",
                    "CollectionReadOnlyProperty",
                    "NonPublicCollectionProperty",
                    "NonPublicCollectionField",
                    "NonPublicCollectionReadOnlyProperty",
                    "NonPublicCollectionReadOnlyField",
                    "NonPublicDictionaryProperty",
                    "NonPublicDictionaryField",
                    "NonPublicDictionaryReadOnlyProperty",
                    "NonPublicDictionaryReadOnlyField",
                    "NonPublicIDictionaryProperty",
                    "NonPublicIDictionaryField",
                    "NonPublicIDictionaryReadOnlyProperty",
                    "NonPublicIDictionaryReadOnlyField"};
            this.this_SetUnpackedValueOfPublicPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, int>(this.SetUnpackedValueOfPublicProperty);
            this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate = new System.Func<MsgPack.Unpacker, System.Type, string, int>(MsgPack.Serialization.UnpackHelpers.UnpackInt32Value);
            this.this_SetUnpackedValueOfPublicFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, int>(this.SetUnpackedValueOfPublicField);
            this.this_SetUnpackedValueOfNonPublicPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, int>(this.SetUnpackedValueOfNonPublicProperty);
            this.this_SetUnpackedValueOfNonPublicFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, int>(this.SetUnpackedValueOfNonPublicField);
            this.this_SetUnpackedValueOfNonSerializedPublicFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, int>(this.SetUnpackedValueOfNonSerializedPublicField);
            this.this_SetUnpackedValueOfNonSerializedNonPublicFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, int>(this.SetUnpackedValueOfNonSerializedNonPublicField);
            this.this_SetUnpackedValueOfCollectionReadOnlyPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>(this.SetUnpackedValueOfCollectionReadOnlyProperty);
            this.this_SetUnpackedValueOfNonPublicCollectionPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>(this.SetUnpackedValueOfNonPublicCollectionProperty);
            this.this_SetUnpackedValueOfNonPublicCollectionFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>(this.SetUnpackedValueOfNonPublicCollectionField);
            this.this_SetUnpackedValueOfNonPublicCollectionReadOnlyPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>(this.SetUnpackedValueOfNonPublicCollectionReadOnlyProperty);
            this.this_SetUnpackedValueOfNonPublicCollectionReadOnlyFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>(this.SetUnpackedValueOfNonPublicCollectionReadOnlyField);
            this.this_SetUnpackedValueOfNonPublicDictionaryPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>(this.SetUnpackedValueOfNonPublicDictionaryProperty);
            this.this_SetUnpackedValueOfNonPublicDictionaryFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>(this.SetUnpackedValueOfNonPublicDictionaryField);
            this.this_SetUnpackedValueOfNonPublicDictionaryReadOnlyPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>(this.SetUnpackedValueOfNonPublicDictionaryReadOnlyProperty);
            this.this_SetUnpackedValueOfNonPublicDictionaryReadOnlyFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>(this.SetUnpackedValueOfNonPublicDictionaryReadOnlyField);
            this.this_SetUnpackedValueOfNonPublicIDictionaryPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>(this.SetUnpackedValueOfNonPublicIDictionaryProperty);
            this.this_SetUnpackedValueOfNonPublicIDictionaryFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>(this.SetUnpackedValueOfNonPublicIDictionaryField);
            this.this_SetUnpackedValueOfNonPublicIDictionaryReadOnlyPropertyDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>(this.SetUnpackedValueOfNonPublicIDictionaryReadOnlyProperty);
            this.this_SetUnpackedValueOfNonPublicIDictionaryReadOnlyFieldDelegate = new System.Action<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>(this.SetUnpackedValueOfNonPublicIDictionaryReadOnlyField);
        }
        
        private void PackValueOfAlias(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer0.PackTo(packer, objectTree.PublicProperty);
        }
        
        private void PackValueOfPublicField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer0.PackTo(packer, objectTree.PublicField);
        }
        
        private void PackMemberPlaceHolder(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            packer.PackNull();
        }
        
        private void PackValueOfNonPublicProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer0.PackTo(packer, ((int)(this._methodBaseAnnotatedClass_get_NonPublicProperty0.Invoke(objectTree, null))));
        }
        
        private void PackValueOfNonPublicField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer0.PackTo(packer, ((int)(this._fieldAnnotatedClass_NonPublicField0.GetValue(objectTree))));
        }
        
        private void PackValueOfNonSerializedPublicField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer0.PackTo(packer, objectTree.NonSerializedPublicField);
        }
        
        private void PackValueOfNonSerializedNonPublicField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer0.PackTo(packer, ((int)(this._fieldAnnotatedClass_NonSerializedNonPublicField1.GetValue(objectTree))));
        }
        
        private void PackValueOfCollectionReadOnlyProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer1.PackTo(packer, objectTree.CollectionReadOnlyProperty);
        }
        
        private bool IsCollectionReadOnlyPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (objectTree.CollectionReadOnlyProperty == null);
        }
        
        private void PackValueOfNonPublicCollectionProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer1.PackTo(packer, ((System.Collections.Generic.List<int>)(this._methodBaseAnnotatedClass_get_NonPublicCollectionProperty1.Invoke(objectTree, null))));
        }
        
        private bool IsNonPublicCollectionPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.List<int>)(this._methodBaseAnnotatedClass_get_NonPublicCollectionProperty1.Invoke(objectTree, null))) == null);
        }
        
        private void PackValueOfNonPublicCollectionField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer1.PackTo(packer, ((System.Collections.Generic.List<int>)(this._fieldAnnotatedClass_NonPublicCollectionField2.GetValue(objectTree))));
        }
        
        private bool IsNonPublicCollectionFieldNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.List<int>)(this._fieldAnnotatedClass_NonPublicCollectionField2.GetValue(objectTree))) == null);
        }
        
        private void PackValueOfNonPublicCollectionReadOnlyProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer1.PackTo(packer, ((System.Collections.Generic.List<int>)(this._methodBaseAnnotatedClass_get_NonPublicCollectionReadOnlyProperty2.Invoke(objectTree, null))));
        }
        
        private bool IsNonPublicCollectionReadOnlyPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.List<int>)(this._methodBaseAnnotatedClass_get_NonPublicCollectionReadOnlyProperty2.Invoke(objectTree, null))) == null);
        }
        
        private void PackValueOfNonPublicCollectionReadOnlyField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer1.PackTo(packer, ((System.Collections.Generic.List<int>)(this._fieldAnnotatedClass_NonPublicCollectionReadOnlyField3.GetValue(objectTree))));
        }
        
        private bool IsNonPublicCollectionReadOnlyFieldNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.List<int>)(this._fieldAnnotatedClass_NonPublicCollectionReadOnlyField3.GetValue(objectTree))) == null);
        }
        
        private void PackValueOfNonPublicDictionaryProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer2.PackTo(packer, ((System.Collections.Generic.Dictionary<string, int>)(this._methodBaseAnnotatedClass_get_NonPublicDictionaryProperty3.Invoke(objectTree, null))));
        }
        
        private bool IsNonPublicDictionaryPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.Dictionary<string, int>)(this._methodBaseAnnotatedClass_get_NonPublicDictionaryProperty3.Invoke(objectTree, null))) == null);
        }
        
        private void PackValueOfNonPublicDictionaryField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer2.PackTo(packer, ((System.Collections.Generic.Dictionary<string, int>)(this._fieldAnnotatedClass_NonPublicDictionaryField4.GetValue(objectTree))));
        }
        
        private bool IsNonPublicDictionaryFieldNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.Dictionary<string, int>)(this._fieldAnnotatedClass_NonPublicDictionaryField4.GetValue(objectTree))) == null);
        }
        
        private void PackValueOfNonPublicDictionaryReadOnlyProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer2.PackTo(packer, ((System.Collections.Generic.Dictionary<string, int>)(this._methodBaseAnnotatedClass_get_NonPublicDictionaryReadOnlyProperty4.Invoke(objectTree, null))));
        }
        
        private bool IsNonPublicDictionaryReadOnlyPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.Dictionary<string, int>)(this._methodBaseAnnotatedClass_get_NonPublicDictionaryReadOnlyProperty4.Invoke(objectTree, null))) == null);
        }
        
        private void PackValueOfNonPublicDictionaryReadOnlyField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer2.PackTo(packer, ((System.Collections.Generic.Dictionary<string, int>)(this._fieldAnnotatedClass_NonPublicDictionaryReadOnlyField5.GetValue(objectTree))));
        }
        
        private bool IsNonPublicDictionaryReadOnlyFieldNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.Generic.Dictionary<string, int>)(this._fieldAnnotatedClass_NonPublicDictionaryReadOnlyField5.GetValue(objectTree))) == null);
        }
        
        private void PackValueOfNonPublicIDictionaryProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer3.PackTo(packer, ((System.Collections.IDictionary)(this._methodBaseAnnotatedClass_get_NonPublicIDictionaryProperty5.Invoke(objectTree, null))));
        }
        
        private bool IsNonPublicIDictionaryPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.IDictionary)(this._methodBaseAnnotatedClass_get_NonPublicIDictionaryProperty5.Invoke(objectTree, null))) == null);
        }
        
        private void PackValueOfNonPublicIDictionaryField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer3.PackTo(packer, ((System.Collections.IDictionary)(this._fieldAnnotatedClass_NonPublicIDictionaryField6.GetValue(objectTree))));
        }
        
        private bool IsNonPublicIDictionaryFieldNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.IDictionary)(this._fieldAnnotatedClass_NonPublicIDictionaryField6.GetValue(objectTree))) == null);
        }
        
        private void PackValueOfNonPublicIDictionaryReadOnlyProperty(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer3.PackTo(packer, ((System.Collections.IDictionary)(this._methodBaseAnnotatedClass_get_NonPublicIDictionaryReadOnlyProperty6.Invoke(objectTree, null))));
        }
        
        private bool IsNonPublicIDictionaryReadOnlyPropertyNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.IDictionary)(this._methodBaseAnnotatedClass_get_NonPublicIDictionaryReadOnlyProperty6.Invoke(objectTree, null))) == null);
        }
        
        private void PackValueOfNonPublicIDictionaryReadOnlyField(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            this._serializer3.PackTo(packer, ((System.Collections.IDictionary)(this._fieldAnnotatedClass_NonPublicIDictionaryReadOnlyField7.GetValue(objectTree))));
        }
        
        private bool IsNonPublicIDictionaryReadOnlyFieldNull(MsgPack.Serialization.AnnotatedClass objectTree) {
            return (((System.Collections.IDictionary)(this._fieldAnnotatedClass_NonPublicIDictionaryReadOnlyField7.GetValue(objectTree))) == null);
        }
        
        protected internal override void PackToCore(MsgPack.Packer packer, MsgPack.Serialization.AnnotatedClass objectTree) {
            MsgPack.Serialization.PackToArrayParameters<MsgPack.Serialization.AnnotatedClass> packHelperParameters = default(MsgPack.Serialization.PackToArrayParameters<MsgPack.Serialization.AnnotatedClass>);
            packHelperParameters.Packer = packer;
            packHelperParameters.Target = objectTree;
            packHelperParameters.Operations = this._packOperationList;
            MsgPack.Serialization.PackToMapParameters<MsgPack.Serialization.AnnotatedClass> packHelperParameters0 = default(MsgPack.Serialization.PackToMapParameters<MsgPack.Serialization.AnnotatedClass>);
            packHelperParameters0.Packer = packer;
            packHelperParameters0.Target = objectTree;
            packHelperParameters0.Operations = this._packOperationTable;
            packHelperParameters0.SerializationContext = this.OwnerContext;
            packHelperParameters0.NullCheckers = this._nullCheckersTable;
            if ((this.OwnerContext.SerializationMethod == MsgPack.Serialization.SerializationMethod.Array)) {
                MsgPack.Serialization.PackHelpers.PackToArray(ref packHelperParameters);
            }
            else {
                MsgPack.Serialization.PackHelpers.PackToMap(ref packHelperParameters0);
            }
        }
        
        private void SetUnpackedValueOfPublicProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, int unpackedValue) {
            unpackingContext.PublicProperty = unpackedValue;
        }
        
        private void UnpackValueOfAlias(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int> unpackHelperParameters = default(MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int>);
            unpackHelperParameters.Unpacker = unpacker;
            unpackHelperParameters.UnpackingContext = unpackingContext;
            unpackHelperParameters.Serializer = this._serializer0;
            unpackHelperParameters.ItemsCount = itemsCount;
            unpackHelperParameters.Unpacked = indexOfItem;
            unpackHelperParameters.TargetObjectType = typeof(int);
            unpackHelperParameters.MemberName = "Alias";
            unpackHelperParameters.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters.Setter = this.this_SetUnpackedValueOfPublicPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters);
        }
        
        private void SetUnpackedValueOfPublicField(MsgPack.Serialization.AnnotatedClass unpackingContext, int unpackedValue) {
            unpackingContext.PublicField = unpackedValue;
        }
        
        private void UnpackValueOfPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int> unpackHelperParameters0 = default(MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int>);
            unpackHelperParameters0.Unpacker = unpacker;
            unpackHelperParameters0.UnpackingContext = unpackingContext;
            unpackHelperParameters0.Serializer = this._serializer0;
            unpackHelperParameters0.ItemsCount = itemsCount;
            unpackHelperParameters0.Unpacked = indexOfItem;
            unpackHelperParameters0.TargetObjectType = typeof(int);
            unpackHelperParameters0.MemberName = "PublicField";
            unpackHelperParameters0.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters0.Setter = this.this_SetUnpackedValueOfPublicFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters0);
        }
        
        private void UnpackMemberPlaceHolder(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            unpacker.Read();
        }
        
        private void SetUnpackedValueOfNonPublicProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, int unpackedValue) {
            this._methodBaseAnnotatedClass_set_NonPublicProperty7.Invoke(unpackingContext, new object[] {
                        ((object)(unpackedValue))});
        }
        
        private void UnpackValueOfNonPublicProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int> unpackHelperParameters1 = default(MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int>);
            unpackHelperParameters1.Unpacker = unpacker;
            unpackHelperParameters1.UnpackingContext = unpackingContext;
            unpackHelperParameters1.Serializer = this._serializer0;
            unpackHelperParameters1.ItemsCount = itemsCount;
            unpackHelperParameters1.Unpacked = indexOfItem;
            unpackHelperParameters1.TargetObjectType = typeof(int);
            unpackHelperParameters1.MemberName = "NonPublicProperty";
            unpackHelperParameters1.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters1.Setter = this.this_SetUnpackedValueOfNonPublicPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters1);
        }
        
        private void SetUnpackedValueOfNonPublicField(MsgPack.Serialization.AnnotatedClass unpackingContext, int unpackedValue) {
            this._fieldAnnotatedClass_NonPublicField0.SetValue(unpackingContext, ((object)(unpackedValue)));
        }
        
        private void UnpackValueOfNonPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int> unpackHelperParameters2 = default(MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int>);
            unpackHelperParameters2.Unpacker = unpacker;
            unpackHelperParameters2.UnpackingContext = unpackingContext;
            unpackHelperParameters2.Serializer = this._serializer0;
            unpackHelperParameters2.ItemsCount = itemsCount;
            unpackHelperParameters2.Unpacked = indexOfItem;
            unpackHelperParameters2.TargetObjectType = typeof(int);
            unpackHelperParameters2.MemberName = "NonPublicField";
            unpackHelperParameters2.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters2.Setter = this.this_SetUnpackedValueOfNonPublicFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters2);
        }
        
        private void SetUnpackedValueOfNonSerializedPublicField(MsgPack.Serialization.AnnotatedClass unpackingContext, int unpackedValue) {
            unpackingContext.NonSerializedPublicField = unpackedValue;
        }
        
        private void UnpackValueOfNonSerializedPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int> unpackHelperParameters3 = default(MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int>);
            unpackHelperParameters3.Unpacker = unpacker;
            unpackHelperParameters3.UnpackingContext = unpackingContext;
            unpackHelperParameters3.Serializer = this._serializer0;
            unpackHelperParameters3.ItemsCount = itemsCount;
            unpackHelperParameters3.Unpacked = indexOfItem;
            unpackHelperParameters3.TargetObjectType = typeof(int);
            unpackHelperParameters3.MemberName = "NonSerializedPublicField";
            unpackHelperParameters3.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters3.Setter = this.this_SetUnpackedValueOfNonSerializedPublicFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters3);
        }
        
        private void SetUnpackedValueOfNonSerializedNonPublicField(MsgPack.Serialization.AnnotatedClass unpackingContext, int unpackedValue) {
            this._fieldAnnotatedClass_NonSerializedNonPublicField1.SetValue(unpackingContext, ((object)(unpackedValue)));
        }
        
        private void UnpackValueOfNonSerializedNonPublicField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int> unpackHelperParameters4 = default(MsgPack.Serialization.UnpackValueTypeValueParameters<MsgPack.Serialization.AnnotatedClass, int>);
            unpackHelperParameters4.Unpacker = unpacker;
            unpackHelperParameters4.UnpackingContext = unpackingContext;
            unpackHelperParameters4.Serializer = this._serializer0;
            unpackHelperParameters4.ItemsCount = itemsCount;
            unpackHelperParameters4.Unpacked = indexOfItem;
            unpackHelperParameters4.TargetObjectType = typeof(int);
            unpackHelperParameters4.MemberName = "NonSerializedNonPublicField";
            unpackHelperParameters4.DirectRead = this.MsgPack_Serialization_UnpackHelpers_UnpackInt32ValueDelegate;
            unpackHelperParameters4.Setter = this.this_SetUnpackedValueOfNonSerializedNonPublicFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackValueTypeValue(ref unpackHelperParameters4);
        }
        
        private void SetUnpackedValueOfCollectionReadOnlyProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.List<int> unpackedValue) {
            System.Collections.Generic.List<int> existent = default(System.Collections.Generic.List<int>);
            existent = unpackingContext.CollectionReadOnlyProperty;
            System.Collections.Generic.List<int>.Enumerator enumerator = unpackedValue.GetEnumerator();
            int current;
            try {
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Current;
                    existent.Add(current);
                }
            }
            finally {
                enumerator.Dispose();
            }
        }
        
        private void UnpackValueOfCollectionReadOnlyProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> unpackHelperParameters5 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>);
            unpackHelperParameters5.Unpacker = unpacker;
            unpackHelperParameters5.UnpackingContext = unpackingContext;
            unpackHelperParameters5.Serializer = this._serializer1;
            unpackHelperParameters5.ItemsCount = itemsCount;
            unpackHelperParameters5.Unpacked = indexOfItem;
            unpackHelperParameters5.TargetObjectType = typeof(System.Collections.Generic.List<int>);
            unpackHelperParameters5.MemberName = "CollectionReadOnlyProperty";
            unpackHelperParameters5.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters5.DirectRead = null;
            unpackHelperParameters5.Setter = this.this_SetUnpackedValueOfCollectionReadOnlyPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters5);
        }
        
        private void SetUnpackedValueOfNonPublicCollectionProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.List<int> unpackedValue) {
            System.Collections.Generic.List<int> existent = default(System.Collections.Generic.List<int>);
            existent = ((System.Collections.Generic.List<int>)(this._methodBaseAnnotatedClass_get_NonPublicCollectionProperty1.Invoke(unpackingContext, null)));
            if ((existent == null)) {
                this._methodBaseAnnotatedClass_set_NonPublicCollectionProperty8.Invoke(unpackingContext, new object[] {
                            unpackedValue});
            }
            else {
                System.Collections.Generic.List<int>.Enumerator enumerator = unpackedValue.GetEnumerator();
                int current;
                try {
                    for (
                    ; enumerator.MoveNext(); 
                    ) {
                        current = enumerator.Current;
                        existent.Add(current);
                    }
                }
                finally {
                    enumerator.Dispose();
                }
            }
        }
        
        private void UnpackValueOfNonPublicCollectionProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> unpackHelperParameters6 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>);
            unpackHelperParameters6.Unpacker = unpacker;
            unpackHelperParameters6.UnpackingContext = unpackingContext;
            unpackHelperParameters6.Serializer = this._serializer1;
            unpackHelperParameters6.ItemsCount = itemsCount;
            unpackHelperParameters6.Unpacked = indexOfItem;
            unpackHelperParameters6.TargetObjectType = typeof(System.Collections.Generic.List<int>);
            unpackHelperParameters6.MemberName = "NonPublicCollectionProperty";
            unpackHelperParameters6.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters6.DirectRead = null;
            unpackHelperParameters6.Setter = this.this_SetUnpackedValueOfNonPublicCollectionPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters6);
        }
        
        private void SetUnpackedValueOfNonPublicCollectionField(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.List<int> unpackedValue) {
            System.Collections.Generic.List<int> existent = default(System.Collections.Generic.List<int>);
            existent = ((System.Collections.Generic.List<int>)(this._fieldAnnotatedClass_NonPublicCollectionField2.GetValue(unpackingContext)));
            if ((existent == null)) {
                this._fieldAnnotatedClass_NonPublicCollectionField2.SetValue(unpackingContext, unpackedValue);
            }
            else {
                System.Collections.Generic.List<int>.Enumerator enumerator = unpackedValue.GetEnumerator();
                int current;
                try {
                    for (
                    ; enumerator.MoveNext(); 
                    ) {
                        current = enumerator.Current;
                        existent.Add(current);
                    }
                }
                finally {
                    enumerator.Dispose();
                }
            }
        }
        
        private void UnpackValueOfNonPublicCollectionField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> unpackHelperParameters7 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>);
            unpackHelperParameters7.Unpacker = unpacker;
            unpackHelperParameters7.UnpackingContext = unpackingContext;
            unpackHelperParameters7.Serializer = this._serializer1;
            unpackHelperParameters7.ItemsCount = itemsCount;
            unpackHelperParameters7.Unpacked = indexOfItem;
            unpackHelperParameters7.TargetObjectType = typeof(System.Collections.Generic.List<int>);
            unpackHelperParameters7.MemberName = "NonPublicCollectionField";
            unpackHelperParameters7.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters7.DirectRead = null;
            unpackHelperParameters7.Setter = this.this_SetUnpackedValueOfNonPublicCollectionFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters7);
        }
        
        private void SetUnpackedValueOfNonPublicCollectionReadOnlyProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.List<int> unpackedValue) {
            System.Collections.Generic.List<int> existent = default(System.Collections.Generic.List<int>);
            existent = ((System.Collections.Generic.List<int>)(this._methodBaseAnnotatedClass_get_NonPublicCollectionReadOnlyProperty2.Invoke(unpackingContext, null)));
            System.Collections.Generic.List<int>.Enumerator enumerator = unpackedValue.GetEnumerator();
            int current;
            try {
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Current;
                    existent.Add(current);
                }
            }
            finally {
                enumerator.Dispose();
            }
        }
        
        private void UnpackValueOfNonPublicCollectionReadOnlyProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> unpackHelperParameters8 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>);
            unpackHelperParameters8.Unpacker = unpacker;
            unpackHelperParameters8.UnpackingContext = unpackingContext;
            unpackHelperParameters8.Serializer = this._serializer1;
            unpackHelperParameters8.ItemsCount = itemsCount;
            unpackHelperParameters8.Unpacked = indexOfItem;
            unpackHelperParameters8.TargetObjectType = typeof(System.Collections.Generic.List<int>);
            unpackHelperParameters8.MemberName = "NonPublicCollectionReadOnlyProperty";
            unpackHelperParameters8.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters8.DirectRead = null;
            unpackHelperParameters8.Setter = this.this_SetUnpackedValueOfNonPublicCollectionReadOnlyPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters8);
        }
        
        private void SetUnpackedValueOfNonPublicCollectionReadOnlyField(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.List<int> unpackedValue) {
            System.Collections.Generic.List<int> existent = default(System.Collections.Generic.List<int>);
            existent = ((System.Collections.Generic.List<int>)(this._fieldAnnotatedClass_NonPublicCollectionReadOnlyField3.GetValue(unpackingContext)));
            System.Collections.Generic.List<int>.Enumerator enumerator = unpackedValue.GetEnumerator();
            int current;
            try {
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Current;
                    existent.Add(current);
                }
            }
            finally {
                enumerator.Dispose();
            }
        }
        
        private void UnpackValueOfNonPublicCollectionReadOnlyField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>> unpackHelperParameters9 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.List<int>>);
            unpackHelperParameters9.Unpacker = unpacker;
            unpackHelperParameters9.UnpackingContext = unpackingContext;
            unpackHelperParameters9.Serializer = this._serializer1;
            unpackHelperParameters9.ItemsCount = itemsCount;
            unpackHelperParameters9.Unpacked = indexOfItem;
            unpackHelperParameters9.TargetObjectType = typeof(System.Collections.Generic.List<int>);
            unpackHelperParameters9.MemberName = "NonPublicCollectionReadOnlyField";
            unpackHelperParameters9.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters9.DirectRead = null;
            unpackHelperParameters9.Setter = this.this_SetUnpackedValueOfNonPublicCollectionReadOnlyFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters9);
        }
        
        private void SetUnpackedValueOfNonPublicDictionaryProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.Dictionary<string, int> unpackedValue) {
            System.Collections.Generic.Dictionary<string, int> existent = default(System.Collections.Generic.Dictionary<string, int>);
            existent = ((System.Collections.Generic.Dictionary<string, int>)(this._methodBaseAnnotatedClass_get_NonPublicDictionaryProperty3.Invoke(unpackingContext, null)));
            if ((existent == null)) {
                this._methodBaseAnnotatedClass_set_NonPublicDictionaryProperty9.Invoke(unpackingContext, new object[] {
                            unpackedValue});
            }
            else {
                System.Collections.Generic.Dictionary<string, int>.Enumerator enumerator = unpackedValue.GetEnumerator();
                System.Collections.Generic.KeyValuePair<string, int> current;
                try {
                    for (
                    ; enumerator.MoveNext(); 
                    ) {
                        current = enumerator.Current;
                        existent.Add(current.Key, current.Value);
                    }
                }
                finally {
                    enumerator.Dispose();
                }
            }
        }
        
        private void UnpackValueOfNonPublicDictionaryProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> unpackHelperParameters10 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>);
            unpackHelperParameters10.Unpacker = unpacker;
            unpackHelperParameters10.UnpackingContext = unpackingContext;
            unpackHelperParameters10.Serializer = this._serializer2;
            unpackHelperParameters10.ItemsCount = itemsCount;
            unpackHelperParameters10.Unpacked = indexOfItem;
            unpackHelperParameters10.TargetObjectType = typeof(System.Collections.Generic.Dictionary<string, int>);
            unpackHelperParameters10.MemberName = "NonPublicDictionaryProperty";
            unpackHelperParameters10.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters10.DirectRead = null;
            unpackHelperParameters10.Setter = this.this_SetUnpackedValueOfNonPublicDictionaryPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters10);
        }
        
        private void SetUnpackedValueOfNonPublicDictionaryField(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.Dictionary<string, int> unpackedValue) {
            System.Collections.Generic.Dictionary<string, int> existent = default(System.Collections.Generic.Dictionary<string, int>);
            existent = ((System.Collections.Generic.Dictionary<string, int>)(this._fieldAnnotatedClass_NonPublicDictionaryField4.GetValue(unpackingContext)));
            if ((existent == null)) {
                this._fieldAnnotatedClass_NonPublicDictionaryField4.SetValue(unpackingContext, unpackedValue);
            }
            else {
                System.Collections.Generic.Dictionary<string, int>.Enumerator enumerator = unpackedValue.GetEnumerator();
                System.Collections.Generic.KeyValuePair<string, int> current;
                try {
                    for (
                    ; enumerator.MoveNext(); 
                    ) {
                        current = enumerator.Current;
                        existent.Add(current.Key, current.Value);
                    }
                }
                finally {
                    enumerator.Dispose();
                }
            }
        }
        
        private void UnpackValueOfNonPublicDictionaryField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> unpackHelperParameters11 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>);
            unpackHelperParameters11.Unpacker = unpacker;
            unpackHelperParameters11.UnpackingContext = unpackingContext;
            unpackHelperParameters11.Serializer = this._serializer2;
            unpackHelperParameters11.ItemsCount = itemsCount;
            unpackHelperParameters11.Unpacked = indexOfItem;
            unpackHelperParameters11.TargetObjectType = typeof(System.Collections.Generic.Dictionary<string, int>);
            unpackHelperParameters11.MemberName = "NonPublicDictionaryField";
            unpackHelperParameters11.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters11.DirectRead = null;
            unpackHelperParameters11.Setter = this.this_SetUnpackedValueOfNonPublicDictionaryFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters11);
        }
        
        private void SetUnpackedValueOfNonPublicDictionaryReadOnlyProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.Dictionary<string, int> unpackedValue) {
            System.Collections.Generic.Dictionary<string, int> existent = default(System.Collections.Generic.Dictionary<string, int>);
            existent = ((System.Collections.Generic.Dictionary<string, int>)(this._methodBaseAnnotatedClass_get_NonPublicDictionaryReadOnlyProperty4.Invoke(unpackingContext, null)));
            System.Collections.Generic.Dictionary<string, int>.Enumerator enumerator = unpackedValue.GetEnumerator();
            System.Collections.Generic.KeyValuePair<string, int> current;
            try {
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Current;
                    existent.Add(current.Key, current.Value);
                }
            }
            finally {
                enumerator.Dispose();
            }
        }
        
        private void UnpackValueOfNonPublicDictionaryReadOnlyProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> unpackHelperParameters12 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>);
            unpackHelperParameters12.Unpacker = unpacker;
            unpackHelperParameters12.UnpackingContext = unpackingContext;
            unpackHelperParameters12.Serializer = this._serializer2;
            unpackHelperParameters12.ItemsCount = itemsCount;
            unpackHelperParameters12.Unpacked = indexOfItem;
            unpackHelperParameters12.TargetObjectType = typeof(System.Collections.Generic.Dictionary<string, int>);
            unpackHelperParameters12.MemberName = "NonPublicDictionaryReadOnlyProperty";
            unpackHelperParameters12.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters12.DirectRead = null;
            unpackHelperParameters12.Setter = this.this_SetUnpackedValueOfNonPublicDictionaryReadOnlyPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters12);
        }
        
        private void SetUnpackedValueOfNonPublicDictionaryReadOnlyField(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.Generic.Dictionary<string, int> unpackedValue) {
            System.Collections.Generic.Dictionary<string, int> existent = default(System.Collections.Generic.Dictionary<string, int>);
            existent = ((System.Collections.Generic.Dictionary<string, int>)(this._fieldAnnotatedClass_NonPublicDictionaryReadOnlyField5.GetValue(unpackingContext)));
            System.Collections.Generic.Dictionary<string, int>.Enumerator enumerator = unpackedValue.GetEnumerator();
            System.Collections.Generic.KeyValuePair<string, int> current;
            try {
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Current;
                    existent.Add(current.Key, current.Value);
                }
            }
            finally {
                enumerator.Dispose();
            }
        }
        
        private void UnpackValueOfNonPublicDictionaryReadOnlyField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>> unpackHelperParameters13 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.Generic.Dictionary<string, int>>);
            unpackHelperParameters13.Unpacker = unpacker;
            unpackHelperParameters13.UnpackingContext = unpackingContext;
            unpackHelperParameters13.Serializer = this._serializer2;
            unpackHelperParameters13.ItemsCount = itemsCount;
            unpackHelperParameters13.Unpacked = indexOfItem;
            unpackHelperParameters13.TargetObjectType = typeof(System.Collections.Generic.Dictionary<string, int>);
            unpackHelperParameters13.MemberName = "NonPublicDictionaryReadOnlyField";
            unpackHelperParameters13.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters13.DirectRead = null;
            unpackHelperParameters13.Setter = this.this_SetUnpackedValueOfNonPublicDictionaryReadOnlyFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters13);
        }
        
        private void SetUnpackedValueOfNonPublicIDictionaryProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.IDictionary unpackedValue) {
            System.Collections.IDictionary existent = default(System.Collections.IDictionary);
            existent = ((System.Collections.IDictionary)(this._methodBaseAnnotatedClass_get_NonPublicIDictionaryProperty5.Invoke(unpackingContext, null)));
            if ((existent == null)) {
                this._methodBaseAnnotatedClass_set_NonPublicIDictionaryProperty10.Invoke(unpackingContext, new object[] {
                            unpackedValue});
            }
            else {
                System.Collections.IDictionaryEnumerator enumerator = unpackedValue.GetEnumerator();
                System.Collections.DictionaryEntry current;
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Entry;
                    existent.Add(current.Key, current.Value);
                }
            }
        }
        
        private void UnpackValueOfNonPublicIDictionaryProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> unpackHelperParameters14 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>);
            unpackHelperParameters14.Unpacker = unpacker;
            unpackHelperParameters14.UnpackingContext = unpackingContext;
            unpackHelperParameters14.Serializer = this._serializer3;
            unpackHelperParameters14.ItemsCount = itemsCount;
            unpackHelperParameters14.Unpacked = indexOfItem;
            unpackHelperParameters14.TargetObjectType = typeof(System.Collections.IDictionary);
            unpackHelperParameters14.MemberName = "NonPublicIDictionaryProperty";
            unpackHelperParameters14.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters14.DirectRead = null;
            unpackHelperParameters14.Setter = this.this_SetUnpackedValueOfNonPublicIDictionaryPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters14);
        }
        
        private void SetUnpackedValueOfNonPublicIDictionaryField(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.IDictionary unpackedValue) {
            System.Collections.IDictionary existent = default(System.Collections.IDictionary);
            existent = ((System.Collections.IDictionary)(this._fieldAnnotatedClass_NonPublicIDictionaryField6.GetValue(unpackingContext)));
            if ((existent == null)) {
                this._fieldAnnotatedClass_NonPublicIDictionaryField6.SetValue(unpackingContext, unpackedValue);
            }
            else {
                System.Collections.IDictionaryEnumerator enumerator = unpackedValue.GetEnumerator();
                System.Collections.DictionaryEntry current;
                for (
                ; enumerator.MoveNext(); 
                ) {
                    current = enumerator.Entry;
                    existent.Add(current.Key, current.Value);
                }
            }
        }
        
        private void UnpackValueOfNonPublicIDictionaryField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> unpackHelperParameters15 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>);
            unpackHelperParameters15.Unpacker = unpacker;
            unpackHelperParameters15.UnpackingContext = unpackingContext;
            unpackHelperParameters15.Serializer = this._serializer3;
            unpackHelperParameters15.ItemsCount = itemsCount;
            unpackHelperParameters15.Unpacked = indexOfItem;
            unpackHelperParameters15.TargetObjectType = typeof(System.Collections.IDictionary);
            unpackHelperParameters15.MemberName = "NonPublicIDictionaryField";
            unpackHelperParameters15.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters15.DirectRead = null;
            unpackHelperParameters15.Setter = this.this_SetUnpackedValueOfNonPublicIDictionaryFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters15);
        }
        
        private void SetUnpackedValueOfNonPublicIDictionaryReadOnlyProperty(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.IDictionary unpackedValue) {
            System.Collections.IDictionary existent = default(System.Collections.IDictionary);
            existent = ((System.Collections.IDictionary)(this._methodBaseAnnotatedClass_get_NonPublicIDictionaryReadOnlyProperty6.Invoke(unpackingContext, null)));
            System.Collections.IDictionaryEnumerator enumerator = unpackedValue.GetEnumerator();
            System.Collections.DictionaryEntry current;
            for (
            ; enumerator.MoveNext(); 
            ) {
                current = enumerator.Entry;
                existent.Add(current.Key, current.Value);
            }
        }
        
        private void UnpackValueOfNonPublicIDictionaryReadOnlyProperty(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> unpackHelperParameters16 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>);
            unpackHelperParameters16.Unpacker = unpacker;
            unpackHelperParameters16.UnpackingContext = unpackingContext;
            unpackHelperParameters16.Serializer = this._serializer3;
            unpackHelperParameters16.ItemsCount = itemsCount;
            unpackHelperParameters16.Unpacked = indexOfItem;
            unpackHelperParameters16.TargetObjectType = typeof(System.Collections.IDictionary);
            unpackHelperParameters16.MemberName = "NonPublicIDictionaryReadOnlyProperty";
            unpackHelperParameters16.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters16.DirectRead = null;
            unpackHelperParameters16.Setter = this.this_SetUnpackedValueOfNonPublicIDictionaryReadOnlyPropertyDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters16);
        }
        
        private void SetUnpackedValueOfNonPublicIDictionaryReadOnlyField(MsgPack.Serialization.AnnotatedClass unpackingContext, System.Collections.IDictionary unpackedValue) {
            System.Collections.IDictionary existent = default(System.Collections.IDictionary);
            existent = ((System.Collections.IDictionary)(this._fieldAnnotatedClass_NonPublicIDictionaryReadOnlyField7.GetValue(unpackingContext)));
            System.Collections.IDictionaryEnumerator enumerator = unpackedValue.GetEnumerator();
            System.Collections.DictionaryEntry current;
            for (
            ; enumerator.MoveNext(); 
            ) {
                current = enumerator.Entry;
                existent.Add(current.Key, current.Value);
            }
        }
        
        private void UnpackValueOfNonPublicIDictionaryReadOnlyField(MsgPack.Unpacker unpacker, MsgPack.Serialization.AnnotatedClass unpackingContext, int indexOfItem, int itemsCount) {
            MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary> unpackHelperParameters17 = default(MsgPack.Serialization.UnpackReferenceTypeValueParameters<MsgPack.Serialization.AnnotatedClass, System.Collections.IDictionary>);
            unpackHelperParameters17.Unpacker = unpacker;
            unpackHelperParameters17.UnpackingContext = unpackingContext;
            unpackHelperParameters17.Serializer = this._serializer3;
            unpackHelperParameters17.ItemsCount = itemsCount;
            unpackHelperParameters17.Unpacked = indexOfItem;
            unpackHelperParameters17.TargetObjectType = typeof(System.Collections.IDictionary);
            unpackHelperParameters17.MemberName = "NonPublicIDictionaryReadOnlyField";
            unpackHelperParameters17.NilImplication = MsgPack.Serialization.NilImplication.MemberDefault;
            unpackHelperParameters17.DirectRead = null;
            unpackHelperParameters17.Setter = this.this_SetUnpackedValueOfNonPublicIDictionaryReadOnlyFieldDelegate;
            MsgPack.Serialization.UnpackHelpers.UnpackReferenceTypeValue(ref unpackHelperParameters17);
        }
        
        protected internal override MsgPack.Serialization.AnnotatedClass UnpackFromCore(MsgPack.Unpacker unpacker) {
            MsgPack.Serialization.AnnotatedClass result = default(MsgPack.Serialization.AnnotatedClass);
            result = new MsgPack.Serialization.AnnotatedClass();
            if (unpacker.IsArrayHeader) {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromArray(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.AnnotatedClass>(), this._memberNames, this._unpackOperationList);
            }
            else {
                return MsgPack.Serialization.UnpackHelpers.UnpackFromMap(unpacker, result, MsgPack.Serialization.UnpackHelpers.GetIdentity<MsgPack.Serialization.AnnotatedClass>(), this._unpackOperationTable);
            }
        }
    }
}
