<#+ 
void Geneate( string serializationMethod, string emitterFlavor, string builderTypeName, bool canDump, string language = "" )
{
#>
#region -- License Terms --
//
// MessagePack for CLI
//
// Copyright (C) 2010-2016 FUJIWARA, Yusuke
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.
//
#endregion -- License Terms --

using System;
#if !NETFX_CORE
using System.Collections;
#endif
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
#if !SILVERLIGHT && !AOT && !NETSTANDARD1_1 && !NETSTANDARD1_3 && !NETSTANDARD1_6
using MsgPack.Serialization.CodeDomSerializers;
using MsgPack.Serialization.EmittingSerializers;
#endif // !SILVERLIGHT && !AOT && !NETSTANDARD1_1 && !NETSTANDARD1_3 && !NETSTANDARD1_6
#if !NETFX_CORE
using Microsoft.FSharp.Collections;
#endif // !NETFX_CORE
#if !MSTEST
using NUnit.Framework;
#else
using TestFixtureAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestClassAttribute;
using TestAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestMethodAttribute;
using SetUpAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestInitializeAttribute;
using TearDownAttribute = Microsoft.VisualStudio.TestPlatform.UnitTestFramework.TestCleanupAttribute;
using TimeoutAttribute = NUnit.Framework.TimeoutAttribute;
using Assert = NUnit.Framework.Assert;
using Is = NUnit.Framework.Is;
#endif

namespace MsgPack.Serialization
{
	[TestFixture]
	public class <#= serializationMethod #><#= language #><#= emitterFlavor #>ImmutableCollectionsTest
	{
		private MessagePackSerializer<T> CreateTarget<T>()
		{
			var context = new SerializationContext { SerializationMethod = SerializationMethod.<#= serializationMethod #> };
			context.SerializerOptions.EmitterFlavor = EmitterFlavor.<#=  emitterFlavor #>;
			return context.GetSerializer<T>( PolymorphismSchema.Default );
		}
		
		private bool CanDump
		{
			get { return <#= canDump.ToString().ToLowerInvariant() #>; }
		}

#if !NETFX_CORE && !SILVERLIGHT && !AOT
		[SetUp]
		public void SetUp()
		{
#if !NETSTANDARD1_1 && !NETSTANDARD1_3 && !NETSTANDARD1_6
			//SerializerDebugging.TraceEnabled = true;
			//SerializerDebugging.DumpEnabled = true;
			if ( SerializerDebugging.TraceEnabled )
			{
				Tracer.Emit.Listeners.Clear();
				Tracer.Emit.Switch.Level = SourceLevels.All;
				Tracer.Emit.Listeners.Add( new ConsoleTraceListener() );
			}

			SerializerDebugging.DependentAssemblyManager = new TempFileDependentAssemblyManager( TestContext.CurrentContext.TestDirectory );
			SerializerDebugging.DeletePastTemporaries();
			SerializerDebugging.OnTheFlyCodeGenerationEnabled = true;

#if NET35
			SerializerDebugging.SetCodeCompiler( CodeDomCodeGeneration.Compile );
#else
			SerializerDebugging.SetCodeCompiler( RoslynCodeGeneration.Compile );
#endif // NET35

			SerializerDebugging.DumpDirectory = TestContext.CurrentContext.TestDirectory;
			SerializerDebugging.AddRuntimeAssembly( typeof( ImmutableList ).Assembly.Location );
#endif // !NETSTANDARD1_1 && !NETSTANDARD1_3 && !NETSTANDARD1_6
		}

		[TearDown]
		public void TearDown()
		{
#if !NETSTANDARD1_1 && !NETSTANDARD1_3 && !NETSTANDARD1_6
			if ( SerializerDebugging.DumpEnabled && this.CanDump )
			{
				try
				{
					SerializerDebugging.Dump();
				}
				catch ( NotSupportedException ex )
				{
					Console.Error.WriteLine( ex );
				}
				finally
				{
					SerializationMethodGeneratorManager.Refresh();
				}
			}

			SerializerDebugging.Reset();
			SerializerDebugging.OnTheFlyCodeGenerationEnabled = false;
#endif // !NETSTANDARD1_1 && !NETSTANDARD1_3 && !NETSTANDARD1_6
		}
#endif // !NETFX_CORE && !SDILVERLIGHT && !AOT

		[Test]
		public void QueueSerializationTest()
		{
			var serializer = SerializationContext.Default.GetSerializer<Queue<int>>();
			var value = new Queue<int>();
			value.Enqueue( 1 );
			value.Enqueue( 2 );

			using ( var buffer = new MemoryStream() )
			{
				serializer.Pack( buffer, value );
				buffer.Position = 0;
				var result = serializer.Unpack( buffer );
				Assert.That( result, Is.EqualTo( value ) );
			}
		}

		[Test]
		public void StackSerializationTest()
		{
			var serializer = SerializationContext.Default.GetSerializer<Stack<int>>();
			var value = new Stack<int>();
			value.Push( 1 );
			value.Push( 2 );

			using ( var buffer = new MemoryStream() )
			{
				serializer.Pack( buffer, value );
				buffer.Position = 0;
				var result = serializer.Unpack( buffer );
				Assert.That( result, Is.EqualTo( value ) );
			}
		}

#if !NETFX_CORE
		[Test]
		public void NonGenericQueueSerializationTest()
		{
			var serializer = SerializationContext.Default.GetSerializer<Queue>();
			var value = new Queue();
			value.Enqueue( ( MessagePackObject )1 );
			value.Enqueue( ( MessagePackObject )2 );

			using ( var buffer = new MemoryStream() )
			{
				serializer.Pack( buffer, value );
				buffer.Position = 0;
				var result = serializer.Unpack( buffer );
				Assert.That( result, Is.EqualTo( value ) );
			}
		}

		[Test]
		public void NonGenericStackSerializationTest()
		{
			var serializer = SerializationContext.Default.GetSerializer<Stack>();
			var value = new Stack();
			value.Push( ( MessagePackObject )1 );
			value.Push( ( MessagePackObject )2 );

			using ( var buffer = new MemoryStream() )
			{
				serializer.Pack( buffer, value );
				buffer.Position = 0;
				var result = serializer.Unpack( buffer );
				Assert.That( result, Is.EqualTo( value ) );
			}
		}
#endif // !NETFX_CORE

<#+
	foreach ( var type in
		new []
		{
			"ImmutableArray`1",
			"ImmutableList`1",
			"ImmutableStack`1",
			"ImmutableQueue`1",
			"ImmutableHashSet`1",
			"ImmutableSortedSet`1",
			"ImmutableDictionary`2",
			"ImmutableSortedDictionary`2",
		}
	)
	{
		foreach ( var itemsCount in new []{ 0, 1, 2 } )
		{
			var safeTypeName = type.Remove( type.IndexOf( '`' ) );
			var isDictionary = type.EndsWith( "2" );
			var addMethod =
				safeTypeName.EndsWith( "Queue" )
				? "Enqueue"
				: safeTypeName.EndsWith( "Stack" )
				? "Push"
				: "Add";

			var genericArguments = "<" + String.Format( CultureInfo.InvariantCulture, isDictionary ? "{0}, {0}" : "{0}", "int" ) + ">";
#>

		[Test]
		public void <#= safeTypeName #>Test_<#= itemsCount #>_Success()
		{
			var collection = <#= safeTypeName #>.Create<#= genericArguments #>();
<#+
			for ( int i = 0; i < itemsCount; i++ )
			{
#>
			collection = collection.<#= addMethod #>( <#= String.Format( CultureInfo.InvariantCulture, isDictionary ? "{0}, {0}" : "{0}", i ) #> );
<#+
			}
#>
			var target = this.CreateTarget<<#= safeTypeName + genericArguments #>>();
			using ( var buffer = new MemoryStream() )
			{
				target.Pack( buffer, collection );
				buffer.Position = 0;
				var unpacked = target.Unpack( buffer );
				buffer.Position = 0;
				Assert.That( unpacked.ToArray(), Is.EqualTo( collection.ToArray() ) );
			}
		}
<#+
		}
	}
#>

#if !NETFX_CORE

<#+
	foreach ( var type in
		new []
		{
			new FSharpCollectionSpec { Name = "FSharpList`1",	Add = ( t, instance, _, value ) => "new FSharpList<" + t + ">( " + value + ", " + instance  + " )",	Constructor = ( t, _ ) => "FSharpList<" + t + ">.Empty" },
			new FSharpCollectionSpec { Name = "FSharpSet`1",	Add = ( _1, instance, _2, value ) => instance + ".Add( " + value + " )",							Constructor = ( t, _ ) => "new FSharpSet<" + t + ">( Enumerable.Empty<" + t + ">() )" },
			new FSharpCollectionSpec { Name = "FSharpMap`2",	Add = ( _, instance, key, value ) => instance + ".Add( " + key + ", " + value + " )",				Constructor = ( tkey, tvalue ) => "new FSharpMap<" + tkey + ", " + tvalue + ">( Enumerable.Empty<Tuple<" + tkey + ", " + tvalue + ">>() )" },
		}
	)
	{
		foreach ( var itemsCount in new []{ 0, 1, 2 } )
		{
			var safeTypeName = type.Name.Remove( type.Name.IndexOf( '`' ) );
			var isDictionary = type.Name.EndsWith( "2" );
#>

		[Test]
		public void <#= safeTypeName #>Test_<#= itemsCount #>_Success()
		{
			var collection = <#= type.Constructor( "int", "int" ) #>;
<#+
			for ( int i = 0; i < itemsCount; i++ )
			{
#>
			collection = <#= type.Add( "int", "collection", i.ToString( CultureInfo.InvariantCulture ), i.ToString( CultureInfo.InvariantCulture ) ) #>;
<#+
			}
#>
			var target = this.CreateTarget<<#= safeTypeName #><<#= isDictionary ? "int, int" : "int" #>>>();
			using ( var buffer = new MemoryStream() )
			{
				target.Pack( buffer, collection );
				buffer.Position = 0;
				var unpacked = target.Unpack( buffer );
				buffer.Position = 0;
				Assert.That( unpacked.ToArray(), Is.EqualTo( collection.ToArray() ) );
			}
		}
<#+
		}
	}
#>

#endif // !NETFX_CORE

	}
}
<#+
}

private sealed class FSharpCollectionSpec
{
	public string Name;
	// type, instance, key, value => result
	public Func<string, string, string, string, string> Add;
	// T1, T2 => result
	public Func<string, string, string> Constructor;
}
#>